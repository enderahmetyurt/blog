<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">

 <title>Ender Ahmet Yurt</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2023-04-07T13:29:34+03:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>Ender Ahmet Yurt</name>
   <email>enderyurt@gmail.com</email>
 </author>

 
 <entry>
   <title>2022'de Ruby</title>
   <link href="http://localhost:4000/2023/02/02/2022-de-ruby.html"/>
   <updated>2023-02-02T20:14:00+03:00</updated>
   <id>http://localhost:4000/2023/02/02/2022-de-ruby</id>
   <content type="html">&lt;p&gt;Merhaba 🙋 2021’in Ruby için nasıl geçtiğine dair bir yazı yazmıştım. Şimdi sıra 2022’ye geldi. Bakalım 2022 Ruby için nasıl geçti.&lt;/p&gt;

&lt;h2 id=&quot;ruby-32&quot;&gt;Ruby 3.2&lt;/h2&gt;

&lt;p&gt;Bu sefer biraz tersten başlamak istiyorum. 24 Aralık’ta duyurulan &lt;strong&gt;Ruby 3.2&lt;/strong&gt; versiyonundan başlayacağım. Her sene Christmas’ta Ruby’nin yeni bir versiyonun çıkmasına zaten topluluktakiler alışık. Geçen sene Ruby 3.1’in release olması ile Ruby’de artık değişim başlıyor demiştik ve bu seneki yapılan çalışmalar ve sonunda Ruby 3.2’nin duyurulması da Ruby’nin o durağan günlerden çıkıp artık konuşulan bir programlama dili olacağını gösterir nitelikte. Özellikle performans tarafında yapılan geliştirmeler ve daha fazla developer friendly bir dil olmaya doğru gitmesi Ruby’nin geleceğinin parlak olacağını bize bu sene göstermeye başladı. Shopify CEO’su Tobb Lutke’nin bu &lt;a href=&quot;https://twitter.com/tobi/status/1605656985185226753&quot;&gt;Tweet’i&lt;/a&gt; zaten Ruby’nin bu seneki gelişimini açıkça gösteriyor. Ayrıca Ruby 3.2 ile artık deneysel olmaktan çıkan YJIT özelliği da bu performansın altında yatan neden diyebiliriz. Topluluktan da tanıdığımız Ufuk Kayserilioğlu’nun &lt;a href=&quot;https://twitter.com/paracycle/status/1605706228734238722&quot;&gt;Tweet flood’u&lt;/a&gt; konuyu daha detaylı anlatıyor. Daha fazla teknik detayları burada tek tek sıralamaktansa sizleri her cumartesi akşam yaptığımız Yakut yayınlarına davet ediyorum. Bütün sene boyunca yakından ve detaylı olarak Ruby’deki gelişmeleri konuştuk ve konuşmaya da devam edeceğiz gibi duruyor.&lt;/p&gt;

&lt;h2 id=&quot;ruby-on-rails-7-ile-geçen-bir-sene&quot;&gt;Ruby on Rails 7 ile geçen bir sene&lt;/h2&gt;

&lt;p&gt;2021’nin son günlerine doğru Ruby on Rails 7.0.0’ın çıkması ile çok heyecanlandığımı söyleyebilirim. Uzun bir zaman sonra yeni bir RoR versiyonuna heyecanlanmamıştım. Bütün sene boyunca şahsen tüm özelliklerini kullanamadım ama side projem &lt;a href=&quot;https://www.podiscover.me&quot;&gt;Podiscover&lt;/a&gt; sayesinde gerçek ortamda çalışan büyük projede RoR’un bu en taze versiyonunu kullanma ve deneyimleme şansı buldum (buluyorum).&lt;/p&gt;

&lt;p&gt;Ruby ile web geliştirme tarafında bizi en çok üzen haberlerden biri bu sene Heroku’nun free dyno’ları kapatması &lt;a href=&quot;https://help.heroku.com/RSBRUH58/removal-of-heroku-free-product-plans-faq&quot;&gt;haberi&lt;/a&gt; oldu. RoR’nun en harika özelliklerinden biri olan pragmatik bir şekilde geliştirme yapmak ve yazılan web uygulamasının çok hızlı ve basit bir şekilde production ortamına atılmasıydı. Heroku bu anlamda birçok insana bedava olarak yardımcı olmuştur. Bu karar ile artık RoR uygulamalarının kolay yoldan nasıl deploy edileceğini konuşulmaya başlamışken ki zaten alternatifler hep vardı DHH, &lt;strong&gt;&lt;a href=&quot;https://github.com/rails/docked&quot;&gt;Docked Rails CLI’ı&lt;/a&gt;&lt;/strong&gt; duyurdu. Bu özellik sayesinde artık RoR uygulamaları kolayca dockerize edilebilir oldu ve en azından başlangıç aşamasında bu engeli de atlamış olduk. Senenin sonuna doğru gelen bu özellik biraz olsun yüzleri güldürdü diyebilirim.&lt;/p&gt;

&lt;p&gt;Bu senenin RoR için en büyük olaylarından biri de &lt;strong&gt;Webpacker&lt;/strong&gt;’ın 5 sene sonra tamamen kaldırılması oldu. RoR 7 ile gelen yeni JS yaklaşımı ve diğer frontend geliştirme özellikleri zaten bunun sinyalini vermişti ve bu sene &lt;a href=&quot;https://github.com/rails/webpacker#webpacker-has-been-retired-&quot;&gt;Webpacker’a veda ettik&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ruby on Rails her ne kadar DHH’in trademark’ı olsa da topluluk RoR özelindeki konularda konuşmaya ve karar vermeye açık. Bu vesile ile RoR topluluğu bu sene kendi &lt;a href=&quot;https://rubyonrails.org/2022/6/13/rails-discord-server-is-now-open-to-the-public&quot;&gt;Discord kanalı herkese açtı&lt;/a&gt;. Bu sayede artık RoR geliştiricileri arasında geçen konuşmaları okuyabilme ve oradaki konulara dahil olabilme şansı sağlandı. Bunun dışında bu sene &lt;strong&gt;&lt;a href=&quot;https://rubyonrails.org/foundation&quot;&gt;The Rails Foundation&lt;/a&gt;&lt;/strong&gt; adında kar amacı gütmeyen bir organizasyon kuruldu. RoR kullanan büyük şirketler bu derneğe bağış yaparak, Ruby on Rails’ın geliştirilmesine bir de bu yoldan katkı sağlamış oldular.&lt;/p&gt;

&lt;h2 id=&quot;diğer-gelişmeler&quot;&gt;Diğer gelişmeler&lt;/h2&gt;

&lt;p&gt;2022’de radarlara takılan birkaç gelişmeden de bahsedicek olursak; Bunlardan ilki &lt;strong&gt;&lt;a href=&quot;https://hanamirb.org/blog/2022/11/22/announcing-hanami-200/&quot;&gt;Hanami&lt;/a&gt;&lt;/strong&gt;’nin sonunda ikinci versiyonun çıkmış olması diyebiliriz. Bizim kanımıza göre Hanami biraz Ruby on Rails olma yolunda ilerlese de gene de Ruby ekosistemine farklılıklar getirdiğini söylemek mümkün.&lt;/p&gt;

&lt;p&gt;Diğer gelişmeler arasında &lt;strong&gt;&lt;a href=&quot;https://www.mikeperham.com/2022/10/27/introducing-sidekiq-7.0/&quot;&gt;Sidekiq 7&lt;/a&gt;&lt;/strong&gt;‘nin release olmasını koymazsak olmaz gibi sanki. Ruby ekosisteminde en çok tercih edilen background job yönetme aracı olan Sidekiq, 2022’de sadece performans anlamında değil metrikleri gösterme anlamında da yenilere giderek 7. sürümünü duyurdu.&lt;/p&gt;

&lt;h2 id=&quot;konferanslar&quot;&gt;Konferanslar&lt;/h2&gt;

&lt;p&gt;Bu sene de geçen sene gibi RailsConf, Euroko, RubyKaigi ve RubyConf gibi konferanslar gördük. Bunlara ek olarak bu sene RubyConfMini adında daha çok ilk kez konuşma vereceklere yönelik yeni bir konferans daha görmüş olduk. Bu konferansların bazılarının videolarına şu an erişim olmasa da beğendiklerimden birkaçını sizlerle paylaşmak istiyorum.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=DzyGdOd_6-Y&amp;amp;list=PLbHJudTY1K0f1WgIbKCc0_M-XMraWwCmk&amp;amp;index=2&amp;amp;ab_channel=RubyCentral&quot;&gt;RailsConf 2022 — Opening Keynote: The Journey to Zeitwerk by Xavier Noria&lt;/a&gt; (bu sene ilk defa RailsConf’da açılış keynote’nu DHH yapmadı.)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=5QgQicKHmeU&amp;amp;ab_channel=RubyCentral&quot;&gt;RailsConf 2022 — Keynote: RailsConf 2022 — It’s been a minute! by Aaron Patterson&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=gseo4vdmSjE&amp;amp;list=PLbFmgWm555yYwwmwMvpC-RaqnmUTKB2EO&amp;amp;index=10&amp;amp;t=1269s&amp;amp;ab_channel=RubyKaigi&quot;&gt;[EN]ruby/debug — The best investment for your productivity / Stan Lo @_st0012&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=gseo4vdmSjE&amp;amp;list=PLbFmgWm555yYwwmwMvpC-RaqnmUTKB2EO&amp;amp;index=10&amp;amp;t=1269s&amp;amp;ab_channel=RubyKaigi&quot;&gt;Implementing Object Shapes in CRuby by Jemma Issroff&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=gseo4vdmSjE&amp;amp;list=PLbFmgWm555yYwwmwMvpC-RaqnmUTKB2EO&amp;amp;index=10&amp;amp;t=1269s&amp;amp;ab_channel=RubyKaigi&quot;&gt;The Technical and Organizational Infrastructure of the Ruby Community by Adarsh Pandit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ruby-türkiye&quot;&gt;Ruby Türkiye&lt;/h2&gt;

&lt;p&gt;Gelelim bize. Biz neler yaptık koca bir yıl diye bakacak olursak genel olarak geçen seneye göre bu sene biraz daha durgun geçti diyebiliriz. İkisi online bir tanesi de offline olmak üzere toplamda bu sene üç meetup yaptık. Özellikle offline yani yüzyüze yaptığımız meetup çok kalabalıktı ve birbirimizi tekrar görmek iyi geldi. Online meetuplara neden devam edemedik bilmiyorum ama topluluk olarak Ruby’nin de şahlanması ile gelecek yılları daha iyi geçireceğimizi düşünüyorum.&lt;/p&gt;

&lt;p&gt;Topluluk bünyesinde gerçekleştirdiğimiz Yakut yayınlarına bu sene gümbür gümbür devam ettik. Bu sene yaklaşık 30–35 yayın yaptığımızı söyleyebilirim. Bu yayınlarda artık Ruby’e dair habeleri daha detaylı incelemeye ve kendi deneyimlerimizi de anlatmaya başladık. 2022 yılında Yakut’ta yeni yüzler de kendini zaman zaman gösterdi ama hep dediğimiz gibi bunun daha kalıcı olmasını istiyor ve aramızda daha fazla yeni yüzler görmek, yayınlarda onları ağırlamak istiyoruz. Bu sene Yakut bir sponsor aldı. &lt;a href=&quot;https://parasut.com/&quot;&gt;Paraşüt&lt;/a&gt; 2022 yılında Yakut’a sponsor olmaya başladı. Kendilerine bir kez daha teşekkür ederiyoruz.&lt;/p&gt;

&lt;p&gt;Bu sene geçen seneye göre biraz daha az atraksiyonlu görünse de aslında bir takım işleri yerine oturduğumuz ve meyvelerini yavaş yavaş almaya başladığımız bir dönemin başlangıcı gibi geliyor bana. Geçen sene kurguladığımız çalışma şekli ve açtığımız Discourse gibi yeni kanallar sayesinde topluluk bu sene daha fazla büyüdü ve kendine öz bir sistem oturtmaya başladı diyebilirim. Ayrıca bu sene sonlarına doğru websitemize &lt;a href=&quot;https://lab2023.com/&quot;&gt;Lab2023&lt;/a&gt; sponsor oldu ve topluluk olarak ikinci sponsorumuzu da almış olduk. Kendilerine buradan tekrar teşekkür ediyoruz.&lt;/p&gt;

&lt;p&gt;Euruko her sene bir sonraki sene nerede yapılsın diye oylama yapıyor. Euruko2022’de gelecek sene için İstanbul’u aday gösterdik. Sağ olsun Ufuk abi bu Helsinki’de neden İstanbul’da Euruko2023 yapılsın diye orada insanlara &lt;a href=&quot;https://youtu.be/JvVAtssjOu0?t=1898&quot;&gt;anlattı&lt;/a&gt;. Ancak çok minik bir fark ile kazanamadık. Olsun! Tekrar deneyip elbet bir gün Euruko’yu Türkiye’de yapacağız.&lt;/p&gt;

&lt;p&gt;Bizler Ruby Türkiye olarak elimizden geleni topluluk adına yapmaya çalışıyoruz. Zaman zaman iş ve hayat yoğunluğu derken bazı şeylere yetişemiyor olsak da hep daha iyi olacağına inanıyor ve topluluğu bırakmıyoruz. Sizler de aramıza katılmak ve destek olmak isterseniz bizlere &lt;strong&gt;&lt;a href=&quot;https://rubytr.slack.com&quot;&gt;Slack kanalımız&lt;/a&gt;&lt;/strong&gt;’dan ulaşabilirsiniz. Ayrıca Ruby Türkiye’nin bütün hesaplarına da kendi &lt;strong&gt;&lt;a href=&quot;https://www.rubyturkiye.org/&quot;&gt;websitesi&lt;/a&gt;&lt;/strong&gt; üzerinden erişebilirsiniz.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ruby dünyasında 2021’de tabii ki benim bu yazdıklarım ile sınırlı değil. Son zamanlarda Ruby dünya da her ne kadar popüler bir dil olarak görülmese de hala eski gücünü koruyor. Bu sene yapılan yeni atılımlar ile 2022’yi Ruby için daha parlak görüyorum.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Geçen sene bunu demişim ki 2022 cidden Ruby için yeni bir dönemin başlangıcı olduğunu düşünüyorum. Bunun sinyalleri 2021’de verilmişti zaten. Ruby’nin popüler bir dil olması ve daha fazla tercih edilmesi ile gelişmeler daha da artacaktır diye düşünüyorum. Ruby on Rails tarafında ise olan gelişmeler ve yenilikler ile daha fazla geliştiriciye ulaşacak ve web uygulama geliştirme framework’leri arasında eski gücüne kavuşacağını düşünüyorum.&lt;/p&gt;

&lt;p&gt;Ruby ile tanışmak için 2023 iyi bir fırsat olabilir. Hiç yazılım bilmiyor olsanız bile bizlere ulaşabilir, istediğiniz soruları sorabilirsiniz. Kapımız her daim herkese açık.&lt;/p&gt;

&lt;p&gt;❤️&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ruby'de Array#compact Kullanımı</title>
   <link href="http://localhost:4000/2022/01/07/ruby-de-compact-kullan%C4%B1m%C4%B1.html"/>
   <updated>2022-01-07T14:02:00+03:00</updated>
   <id>http://localhost:4000/2022/01/07/ruby-de-compact-kullanımı</id>
   <content type="html">&lt;p&gt;Merhaba 👋 Ruby’de Array’ler ile çalışırken test yazmadığımız zaman sonuçları bize pahallıya patlayabilecek hatalar yapabiliyoruz. Bu hatalardan en çok yapılan bir tanesine değinmek ve ne yapabiliriz diye biraz anlatmak istiyorum.&lt;/p&gt;

&lt;p&gt;Senaryomuz şu şekilde olsun. Elimizde içinde Hash’ler olan bir Array var ve biz bu Array içinden Hash’lerin belirli key’lerini alıp yeni bir Array yapmak istiyoruz.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;people&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;fullname: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Rees Mcloughlin&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;age: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;fullname: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Kylo Hale&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;age: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;fullname: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Aadam Bass&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;age: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;fullname: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Mikhail Healy&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;age: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Elimizdeki bu veriden yetişkin olanların adlarını almak istiyoruz. Aklımıza hızlıca şu yöntem gelebilir.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;ADULT_AGE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;adult_people&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ADULT_AGE&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;adult_people&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:fullname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;adult_people&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [&quot;Aadam Bass&quot;, &quot;Mikhail Healy&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu yöntem yanlış değil ancak daha &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; ile daha sade yazılabilir.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;ADULT_AGE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;adult_people&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ADULT_AGE&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:fullname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;adult_people&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [nil, nil, &quot;Aadam Bass&quot;, &quot;Mikhail Healy&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Kodu &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; ile yazmak kodumuzu ne kadar okunaklı yapsa da &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;each&lt;/code&gt; gibi belli bir duruma uymayan değerleri array dışında bırakmıyor, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt; objesi olarak array’e ekliyor. Bu pek istediğimiz bir durum değil. Çözüm için Ruby’deki &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array#compact&lt;/code&gt; metotunu kullanabiliriz. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; ile bir dizi içersinde dönüyorsak ve dizideki &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt;‘leri kaldırmak istiyorsak &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compact&lt;/code&gt; ile bunu yapabiliriz.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;ADULT_AGE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;adult_people&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ADULT_AGE&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:fullname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compact&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;adult_people&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [&quot;Aadam Bass&quot;, &quot;Mikhail Healy&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sevgiler 🙋‍♂️&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;b&gt;Referanslar:&lt;/b&gt; https://kaiwern.com/posts/2018/03/28/using-ruby-next-in-map/&lt;/small&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>2021'de Ruby</title>
   <link href="http://localhost:4000/2021/12/30/2021-de-ruby.html"/>
   <updated>2021-12-30T15:14:00+03:00</updated>
   <id>http://localhost:4000/2021/12/30/2021-de-ruby</id>
   <content type="html">&lt;p&gt;Merhaba, Bundan önceki &lt;a href=&quot;https://medium.com/@eayurt/2021-ve-belki-biraz-%C3%B6ncesi-f3ec22b6a9be&quot;&gt;yazımda&lt;/a&gt; 2020’nin biraz sonları ve 2021’ kendi hayatımı yorumlamıştım. Şimdi ise 2021 yılında Ruby dünyasında olup bitenleri yazmak istiyorum.&lt;/p&gt;

&lt;p&gt;Bu yazının benzerini 2017 yılında da &lt;a href=&quot;https://medium.com/@eayurt/2017de-ruby-d1b79a3b8b4&quot;&gt;yazmıştım&lt;/a&gt;. Bu sene kendimce konuşmak Ruby’de ve Ruby Türkiye’de olup bitenleri de detaylı olarak yazmaya çalışacağım.&lt;/p&gt;

&lt;h2 id=&quot;ruby-türkiye&quot;&gt;Ruby Türkiye&lt;/h2&gt;

&lt;p&gt;Covid-19 pandemisi bizlere çevrimiçi etkinlikler de yapabileceğimizi gösterdi. 2020 Aralık ayında başladığımız ve adına &lt;strong&gt;Akşam Oturması&lt;/strong&gt; dediğimiz meetup’larımızı düzenli olarak iki haftada bir yapmaya 2021’de de devam ettik. Özellikle 2021’nin Mart ayından Ağustos ayına kadar zaman zaman ayda bire çıkan sıklıklarla buluşmalarımıza devam ettik. Başlarda bir araya geliyor, sohbet ediyorduk. Sonralarda konuşmacılar da davet edip, sunumlu Akşam Oturmaları yapmaya başladık. Bu sene ilk defa meetuplarımızda iki tane yabancı konuşmacı ağırladık. Bütün bu organizasyonları &lt;a href=&quot;https://kommunity.com/ruby-turkiye/events/past&quot;&gt;Kommunity.com&lt;/a&gt; üzerinden organize ettik ve Zoom’da gerçekleştirdik. Konuşmaların kayıtları aldık ve Youtube üzerindeki &lt;a href=&quot;https://www.youtube.com/channel/UClXgXxIOKmdMY-EFOLvVgJQ&quot;&gt;Ruby Türkiye kanalı&lt;/a&gt;nda sunumlardan sonra yükledik.&lt;/p&gt;

&lt;p&gt;Topluluk olarak &lt;a href=&quot;https://www.youtube.com/playlist?list=PLEWqXxI7lAZIHZ4s3fcuy1UmF_YiQkZpi&quot;&gt;Yakut&lt;/a&gt; adında haftalık olarak Ruby dünyasında olup bitenleri konuştuğumuz podcast’i, her cumartesi saat 21:30 ve 22:30 arasında Youtube canlı yayını olarak yapmaya başladık. İlk bölümüne 27 Mart’ta başladık ve 34 bölümdür dur durak bilmeden devam ediyoruz. Yakut daha sonra Twitter’da Periscope yayınlarına da Youtube yayınlarına paralel olarak başladı ve canlı yayın kanalımızı ikiye çıkardık.&lt;/p&gt;

&lt;p&gt;En başından beri yoğun olarak kullandığımız &lt;a href=&quot;https://rubytr.slack.com/&quot;&gt;Slack&lt;/a&gt; kanalımız’da sorular soruların ve bazı değerli konuşmaların kaybolduğunu, ayrıca daha farklı konuşmaların da dönebileceğini düşünerek &lt;a href=&quot;https://discuss.rubyturkiye.org/&quot;&gt;Ruby Türkiye Discourse&lt;/a&gt;’unu açtık. Buradan gelen sorulara ve yorumlara cevaplar vererek, topluluk için daha faydalı olmaya çalışıyoruz.
2021 Türkiye ekonomisi için zor geçti. Bu zorluklar biz yazılımcıları video eğitim veya kitap gibi her ne tüketmek istiyorsak döviz üzerinden alışveriş yapmak durumunda olduğumuz için daha fazla etkiledi. Bu etkilenmeyi biraz olsun azaltmak için &lt;strong&gt;&lt;a href=&quot;https://www.driftingruby.com/&quot;&gt;Driffting Ruby&lt;/a&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;a href=&quot;https://gorails.com/dashboard&quot;&gt;Go Rails&lt;/a&gt;&lt;/strong&gt; ve &lt;strong&gt;&lt;a href=&quot;https://flurly.com/p/ruby-garbage-collection&quot;&gt;Ruby Garbage Collection in Under Two Hours&lt;/a&gt;&lt;/strong&gt; eğitim içeriklerine sadece Ruby Türkiye Slack grubunda bulunanlara indirimler sağladık. Sizlerde Ruby Türkiye Slack kanalına gelip, benimle iletişime geçerseniz, bu kaynaklar için indirim kodlarınızı alabilirsiniz.&lt;/p&gt;

&lt;p&gt;Bütün bir yıl içinde yaptıklarımızı ve daha fazlasını konuşmak adına yönetim işlerimizi &lt;a href=&quot;https://basecamp.com/&quot;&gt;Basecamp&lt;/a&gt;’e taşıdık. Burada daha organize ve ne yaptığımızı bilerek hareket etmeye başladık. 2020 sonlarında çekirdek kadromuz 3 iken şuan 9’a çıktı. Bu sene topluluk için her zaman bir şeyler yapmaya çalışan &lt;a href=&quot;https://twitter.com/paracycle&quot;&gt;Ufuk Kayserilioğlu&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/toziserikan&quot;&gt;Tayfun Öziş Erikan&lt;/a&gt;, &lt;a href=&quot;https://www.linkedin.com/in/yasarcelep&quot;&gt;Yaşar Celep&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/m_dilmac&quot;&gt;Muhammed Dilmaç&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/ogirginc&quot;&gt;Oğulcan Girginç&lt;/a&gt; ve zaman zaman aramıza katılıp, bizlerle bilgileri paylaşan &lt;a href=&quot;https://twitter.com/sdogruyol&quot;&gt;Serdar Doğruyol&lt;/a&gt;’a çok teşekkürler ❤️ Ayrıca sene sonuna doğru aramıza katılan ve çok güzel işler yapacaklarına inandığımız Merve Şahan, Fadime Özhan ve Kemal Akın ve Çoşkun Tekin’e de hoş geldiniz demek istiyorum.&lt;/p&gt;

&lt;h2 id=&quot;ruby-30&quot;&gt;Ruby 3.0&lt;/h2&gt;

&lt;p&gt;Ruby büyük release’leri Christmas’da yaptığı için 2020 sonlarında Ruby 3 hayatımıza girdi ve gelişmesi 2021 boyunca sürdü. Ben bu yazıyı yazarken Ruby 3.1 çıktı. &lt;strong&gt;&lt;a href=&quot;https://www.ruby-lang.org/en/news/2020/12/25/ruby-3-0-0-released/&quot;&gt;Ruby 3&lt;/a&gt;&lt;/strong&gt; ile artık Ruby 2’deki yavaşlık konuları biraz olsun rafa kalkmaya başladı. Şimdilik çok fazla Ruby 3 kullanan duymuyoruz, ancak Ruby 3.1’in çıkması ve Rails 7’de Ruby 2.7 ve üstünün zorunlu olması ile kullanımı artacaktır. Ruby 3 temelde üç ana başlığa odaklandı: Performance, Concurrency ve Typing(Static Analysis). Bunların her biri için ayrı ayrı detaylar verilebilir ama hepsi için de ayrı yazılar yazmak gerekir. Biz Yakut’ta zaman zaman bu konulari detaylı olarak konuştuk, ve dilimiz döndüğünce anlatmaya çalıştık.&lt;/p&gt;

&lt;h2 id=&quot;ruby-on-rails-700&quot;&gt;Ruby on Rails 7.0.0&lt;/h2&gt;

&lt;p&gt;Benim bu sene en çok beklediğim ve senenin sonuna doğru çıkan &lt;strong&gt;&lt;a href=&quot;https://rubyonrails.org/2021/12/15/Rails-7-fulfilling-a-vision&quot;&gt;Ruby on Rails 7.0.0&lt;/a&gt;&lt;/strong&gt; topluluğu bayağı mutlu etti diyebilirim. RoR, versiyonları bir günde bakın yeni versiyon çıktık şeklinde çıkarmıyor, topluluk neler yapıyorsa ve kabul görüyorsa main branch’lerine merge ediyor ve developer’lar için kullanıma direk açıyor. RoR 7’de de bu şekilde yaklaşık bir senedir geliştiriliyor ve biz Yakut’da bu konuların çoğuna yer vermeye çalışıyoruz.. RoR 7 bizlere diğer RoR versiyonlarından özellikle 6. versiyondan farklı birçok şey getiriyor. Bunların başında Webpacker’in kalkması ve import map’lerin kullanılmaya başlaması heyecan verici. Bu konu hakkında DHH’in güzel bir &lt;a href=&quot;https://world.hey.com/dhh/modern-web-apps-without-javascript-bundling-or-transpiling-a20f2755&quot;&gt;yazısı&lt;/a&gt; var, incelemenizi tavsiye ederim. Single Page Application yaklaşımından uzaklaşmak ve buradaki karmaşıklığı çözmek adına Hotwire dedikleri bir yaklaşım ile karşımıza çıktılar. &lt;strong&gt;&lt;a href=&quot;https://hotwired.dev/&quot;&gt;Hotwire&lt;/a&gt;&lt;/strong&gt; kavram olaral çok yeni olmasa da &lt;strong&gt;&lt;a href=&quot;https://turbo.hotwired.dev/&quot;&gt;Turbo&lt;/a&gt;&lt;/strong&gt; ve &lt;strong&gt;&lt;a href=&quot;https://stimulus.hotwired.dev/&quot;&gt;Stimulus&lt;/a&gt;&lt;/strong&gt; ile bizlere web geliştirme yaparken daha az hatta belki hiç Javascript yazmadan web geliştirmeler yapma imkanı sunuyor. RoR 7 ile CSS bundling de artık daha kolay olmaya ve şuan desteklediği, Tailwind CSS, Bootstrap, Bulma, PostCSS, or Dart Sass’i projelerimizde kolayca entegre etme ve kullanma imkanı sunuyor. Backend tarafında ise daha güvenli ve daha hızlı bir web framework’ü yapabilmek adın yaptıkları geliştirmeleri de görebiliyoruz. Özellikle &lt;a href=&quot;https://github.com/rails/rails/pull/41659&quot;&gt;Active Record Encryption&lt;/a&gt;, &lt;a href=&quot;https://github.com/rails/rails/pull/41659&quot;&gt;Asynchronous Query Loading&lt;/a&gt; ve &lt;a href=&quot;https://github.com/fxn/zeitwerk#introduction&quot;&gt;Zeitwerk&lt;/a&gt; bunlara örnek verilebilir.&lt;/p&gt;

&lt;h2 id=&quot;the-one-person-framework&quot;&gt;The One Person Framework&lt;/h2&gt;

&lt;p&gt;DHH’in Aralık ortalarında yazdığı bu &lt;a href=&quot;https://world.hey.com/dhh/the-one-person-framework-711e6318&quot;&gt;yazı&lt;/a&gt; aslında biraz Ruby on Rails 7’nin arkasında yatan motivasyonu anlatıyor ve Rails 7’nin özetini yapıyor. Ancak burada dikkat edilmesi gereken Rails 7 ile sadece bir framework size yeterli ve bu framework ile web’de istediklerinizi yapabilirsiniz yaklaşımı. Daha fazlasına neden ihtyacınız var? Bu sorunun cevabını özellikle startup’lar Rails 4 ve bazen 5 zamanında vermişlerdi. Rails 7 ile daha fazla startup hatta bence scaleup’lar Rails ile güzel işleri, daha zahmetsiz ve hızlı bir şekilde yapmaya başlayacaklar.&lt;/p&gt;

&lt;h2 id=&quot;konferanslar&quot;&gt;Konferanslar&lt;/h2&gt;

&lt;p&gt;RailsConf 2021, Euroko2021, RubyKaigi ve RubyConf 2021 ile bu sene de dört önemli konferans görduk Ruby dünyasında. Bu konferanslardan önerebileceğim birkaç konuşmayı paylaşmak istiyorum.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=FU9wz998-1k&amp;amp;ab_channel=RubyCentral&quot;&gt;RailsConf 2021 — Keynote: All the Things I Thought I Couldn’t Do by Eileen Uchitelle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=AFpq1pDQagw&amp;amp;ab_channel=RubyCentral&quot;&gt;RailsConf 2021- Profiling to make your Rails app faster by Gannon McGibbon&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=lxczDssLYKA&amp;amp;ab_channel=Euruko&quot;&gt;Euroko 2021 - Building a Ruby web app using the Ruby Standard Library by Maple Ong&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=x_YhDCNeFQ8&amp;amp;ab_channel=Euruko&quot;&gt;Euroko 2021- Optimizing Ruby’s memory layout by Peter Zhu &amp;amp; Matthew Valentine-House&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=zO9_uTaELCw&amp;amp;ab_channel=RubyCentral&quot;&gt;RubyConf 2021 - YJIT: Building a new JIT Compiler inside CRuby by Maxime Chevalier Boisvert&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=a3jfpSmikdg&amp;amp;ab_channel=RubyCentral&quot;&gt;RubyConf 2021 - Gradual Typing in Ruby, A Three Year by Ufuk Kayserilioglu, Alexandre Terrasa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sonuç&quot;&gt;Sonuç&lt;/h2&gt;

&lt;p&gt;Ruby dünyasında 2021’de tabii ki benim bu yazdıklarım ile sınırlı değil. Son zamanlarda Ruby dünya da her ne kadar popüler bir dil olarak görülmese de hala eski gücünü koruyor. Bu sene yapılan yeni atılımlar ile 2022’yi Ruby için daha parlak görüyorum.&lt;/p&gt;

&lt;p&gt;2022 yılın için yeni bir programlama dili ve yeni insanlarla tanışma planlarınız varsa Ruby Türkiye’yi ziyaret etmenizi tavsiye ederim. Bizlere Slack, Twitter ve Email üzerinden ulaşabilir, yukarıda paylaştığım &lt;a href=&quot;https://discuss.rubyturkiye.org/&quot;&gt;Ruby Türkiye Discourse&lt;/a&gt;’a gelip, kendinizi tanıtıp, nereden başlayabilirim diye sorabilirsiniz. Kapımız iyi yazılımcılar olmak isteyen herkese açık. Ruby’i sevmiyorsanız bile buluşmalarımıza bekliyoruz, kim bilir belki bizi seversiniz :)
Sevgiler.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;em&gt;&lt;b&gt;Not:&lt;/b&gt; Bu yazının orjinal haline Medium’daki &lt;a href=&quot;https://medium.com/@eayurt/2021de-ruby-f3a534866cfb&quot;&gt;yazım&lt;/a&gt;‘dan ulaşabilirsiniz.&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Sorbet ile Static Typing</title>
   <link href="http://localhost:4000/2020/11/17/sorbet-ile-static-typing.html"/>
   <updated>2020-11-17T14:41:00+03:00</updated>
   <id>http://localhost:4000/2020/11/17/sorbet-ile-static-typing</id>
   <content type="html">&lt;p&gt;Merhaba, Ruby her ne kadar süper sevimli bir dil olsa da dinamik bir dil olduğu için yazılan kodlarda ortaya çıkan hatalar ancak runtime’da kendini gösterebiliyor.&lt;/p&gt;

&lt;p&gt;Ancak statik programlama dillerinde kodlarda ortaya çıkan hataları compile time’da alabiliyoruz. Bu duruma bir örnek vermek gerekirse Ruby’de&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Foo&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;greeting&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yukarıdaki kod bize ancak code çalıştığı zaman &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NoMethodError&lt;/code&gt; hatasını dönecektir. Ancak bu kodu Java gibi compile edilen bir dil ile yazsaydik, hatayı kod compile edildiği zaman alacaktık ve kod içindeki hatalari minimize etme şansımız olacaktı.&lt;/p&gt;

&lt;h2 id=&quot;sorbet&quot;&gt;Sorbet&lt;/h2&gt;

&lt;p&gt;Ruby için geliştirilmiş ve kodunuzdaki method tanımlarını, method signature kontrolleri ve değişken tiplerinin kontrolünü yapan bir Ruby Gem’i. Özünde normal Ruby gibi kodumuzu yazıyoruz ancak Sorbet kullanmak istiyor ve type check yapmak istiyorsak ile Sorbet’in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T::Sig&lt;/code&gt; modulünü kullanarak kontrollerimizi yapabiliyoruz.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# typed: true&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;sorbet-runtime&apos;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Sig&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;x: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;returns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;barr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;91&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# error: Typo!&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;91&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# error: Type mismatch!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;İlk olarak Sorbet’e statik tip kontrollerini ne şekilde raporlaması gerektiğini belirtmek gerekiyor. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;# typed: true&lt;/code&gt; dediğimiz zaman normal type hatalarını raporla demek oluyor. Bu şekilde yapabileceğimiz tam beş adet level var. Bu tiplere ve detaylarına &lt;a href=&quot;https://sorbet.org/docs/static&quot;&gt;buradan&lt;/a&gt; ulaşabilirsiniz. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sorbet-runtime&lt;/code&gt;‘ı require ediyoruz çünku bu kod çalıştırıldığı zaman da hatayı bize döndürsün istiyoruz. Sonrasinda &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; adında bir class’ımız var ve bu class’ın instance’ının bir &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bar&lt;/code&gt; adında bir methodu var. Ruby’de methodlara verilen parametlerin tipi ve method’ların döndürdüğü değelerin tiplerinin pek önemi olmazken Sorbet ile bunlari &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sig&lt;/code&gt; methodu ile belirleyebiliyoruz. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sig {params(x: Integer).returns(String)}&lt;/code&gt; ile bu method integer tipinde bir parametre alır ve String tipinde birşey döner diyoruz.&lt;/p&gt;

&lt;p&gt;Siz de Sorbet’i hızlica denemek istiyorsaniz &lt;a href=&quot;https://sorbet.run/#%23%20typed%3A%20true%0Arequire%20&apos;sorbet-runtime&apos;%0A%0Aclass%20A%0A%20%20extend%20T%3A%3ASig%0A%0A%20%20sig%20%7Bparams(x%3A%20Integer).returns(String)%7D%0A%20%20def%20bar(x)%0A%20%20%20%20x.to_s%0A%20%20end%0Aend%0A%0Adef%20main%0A%20%20A.new.barr(91)%20%20%20%23%20error%3A%20Typo!%0A%20%20A.new.bar(%2291%22)%20%20%23%20error%3A%20Type%20mismatch!%0Aend&quot;&gt;buradan&lt;/a&gt; online Sorbet runtime aracını kullanabilirsiniz.&lt;/p&gt;

&lt;h3 id=&quot;kurulum&quot;&gt;Kurulum&lt;/h3&gt;

&lt;p&gt;Sorbet’i projelerimize eklemek için öncelikle &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; dosyamıza Sorbet ve Sorbet Runtime Gem’lerini eklememiz gerekiyor.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# -- Gemfile --

gem &apos;sorbet&apos;, :group =&amp;gt; :development
gem &apos;sorbet-runtime&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ bundle install&lt;/code&gt; ile Gem’leri indirdikten sonra artık Sorbet kullanmaya başlayabiliriz.&lt;/p&gt;

&lt;h3 id=&quot;kullanım&quot;&gt;Kullanım&lt;/h3&gt;

&lt;p&gt;Sorbet’i kullanacağımız projenin altinda &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ srb init&lt;/code&gt; diyerek Sorbet için gerekli olan dosyaları oluşturuyoruz. Bu dosyalar Sorbet tarafından otomatik oluşuyor. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sorbet&lt;/code&gt; klasörü altında &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt; dosyasi ve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbi&lt;/code&gt; klasörü bulunuyor. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt; dosyası içinde Sorbet için commandline ayarlarını yapabilirsiniz. Daha fazla detaya &lt;a href=&quot;https://sorbet.org/docs/cli&quot;&gt;buradan&lt;/a&gt; bakabilirsiniz. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbi&lt;/code&gt; klasörü içinde ise Sorbet içinde bulunmayan sizin kendi class, module ve diğer nesne tanımlarınızı yapabilir, Sorbet’te bunları kullanabilirsiniz. Sorbet ile gelen RBI dosyalarına &lt;a href=&quot;buradan&quot;&gt;buradan&lt;/a&gt; ulaşabilirsiniz.&lt;/p&gt;

&lt;p&gt;Kendi yazdığımız Ruby kodlarındaki type check’leri yapmak için ise, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ srb tc&lt;/code&gt; komudunu çalıştırarak yapabiliriz.&lt;/p&gt;

&lt;h3 id=&quot;örnek&quot;&gt;Örnek&lt;/h3&gt;

&lt;p&gt;Ben daha önceden yazmış olduğum Ruby Gem’ime Sorbet’i ekledim. Bu &lt;a href=&quot;https://github.com/enderahmetyurt/bilisim_sozlugu/commit/6854a4a607461073b2dc69569b70deeee040c0ec&quot;&gt;commit&lt;/a&gt;‘te görüldüğü gibi &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;search&lt;/code&gt; methoduna &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sig {params(word: String).void}&lt;/code&gt; ekledim. Bu method konsola birşeyler bastığı için &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt; dönüyordu ve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void&lt;/code&gt; ile aslında bu method’un birşey dönmediğini belirttim. Ayrıca lokal değişkenlere de tipler tanımladım. Mesela &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CSS_SELECTOR&lt;/code&gt; için sadece String olabilir demek istedim ve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CSS_SELECTOR = T.let(&quot;table tbody tr&quot;.freeze, String)&lt;/code&gt; bu şekilde yazarak bu değişken sadece String kabul etmelidir dedim. Kodun diğer yerlerinde eğer bu değişkeni String dışında bir tipe eşitlersem Sorbet bana hata dönecek. Sizler de bu kodu düzeltmek isterseniz PR’larınızı memnuniyet ile bekliyorum.&lt;/p&gt;

&lt;h3 id=&quot;sonuç&quot;&gt;Sonuç&lt;/h3&gt;

&lt;p&gt;Ben Sorbet’i çok sevdim ve kendi yazdığım küçük Ruby projeleri için implemente etmeye başladım. Hepinizin merak ettiği bu iş Ruby on Rails’da nasıl oluyor sorularına ise kısa bir zamanda cevap verebilmeyi ben de istiyorum. Konu ile alakalı &lt;a href=&quot;https://flexport.engineering/adding-sorbet-to-a-rails-monolith-ef72d6a18449&quot;&gt;şöyle&lt;/a&gt; bir yazı var, isterseniz inceleyebilirsiniz.&lt;/p&gt;

&lt;p&gt;Ruby her ne kadar süpersonik bir dil olsa da her güzelin bir kusuru var ve o kusurda Sorbet ile biraz olsun kapatılabiliyor.&lt;/p&gt;

&lt;p&gt;Sevgiler.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Referanslar:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.heroku.com/static-typing-ruby-with-sorbet&quot;&gt;https://blog.heroku.com/static-typing-ruby-with-sorbet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/better-programming/static-typed-ruby-introducing-sorbet-from-stripe-eeb4ffd8644&quot;&gt;https://medium.com/better-programming/static-typed-ruby-introducing-sorbet-from-stripe-eeb4ffd8644&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sorbet.org/docs/overview&quot;&gt;https://sorbet.org/docs/overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Ruby 3 ile Gelebilecek Özellikler</title>
   <link href="http://localhost:4000/2020/09/29/ruby-3-ile-gelebilecek-%C3%B6zellikler.html"/>
   <updated>2020-09-29T14:03:00+03:00</updated>
   <id>http://localhost:4000/2020/09/29/ruby-3-ile-gelebilecek-özellikler</id>
   <content type="html">&lt;p&gt;Merhaba, Ruby 3 2020 Aralık ayında yayına çıkmış olacak. Güzel özelliklerle geliyor olsa da bu özelliklerden hangilerinin hala Ruby 3 içerisinde olup olmayacağı tartışma konusu.&lt;/p&gt;

&lt;p&gt;Deneysel özelliklerin bir kısmı Ruby 2.7 ile bizlerin kullanılımına sunuluyor ve deneme, test etme şansı buluyoruz. Bu yazıda Ruby 3’de görmemiz muhtemelen birkaçından bahsedeceğim.&lt;/p&gt;

&lt;p&gt;Matz geçenlerde Github sponsorlarına bir anket gönderdi. Anket, hangi özelliği Ruby 3’de görmek istediğimiz ile alakalıydı. Seçenekler arasında ise şu özellikler vardı:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ractor&lt;/li&gt;
  &lt;li&gt;JIT&lt;/li&gt;
  &lt;li&gt;Type Profiler / Static Type Analysis&lt;/li&gt;
  &lt;li&gt;Heap Compaction (GC Improvement)&lt;/li&gt;
  &lt;li&gt;Pattern Matching&lt;/li&gt;
  &lt;li&gt;Right Assignment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Şimdi bunlara tek tek bakalım.&lt;/p&gt;

&lt;h2 id=&quot;ractor&quot;&gt;Ractor&lt;/h2&gt;

&lt;p&gt;Eski adı Guild olan bir özellikte çalışan Koichi Sasada Matz’ın da önerisi ile adını Ractor’a çevirdi. Mantığının ise &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;Ractor,&quot; Ruby&apos;s Actor-like feature (not an exact Actor-model)&lt;/code&gt; geldiğini söylüyor. Konu aslında MRI Ruby’nin kodu parallel çalıştırmasına izin vermemesinden geliyor. Guild yani yeni ismi ile Ractor, Ruby için yeni bir concurrency modeli öneriyor. Burada asıl amaç Ruby 3 ile bu modeli kurarken Ruby 2 ile uyumluluğu korumak ve parallel çalışabilecek parçaları ve objeleri hızlı bir şekilde paylaşımına izin vermek. Ruby’deki yaygın concurrency problemlerden biri thread’lerin race condition’lar oluşturup, oluşturmadığından emin olmaktır. Ruby’deki &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread::Mutex&lt;/code&gt; ile bunun önüne geçebilirsiniz fakat bu sefer de paralelliği ortadan kaldırmış ya da yavaşlatmış olursunuz.&lt;/p&gt;

&lt;p&gt;Ruby’de Thread ve Fiber olmak üzere iki tane sınıf var. Thread’ler işletim sistemi seviyesinde kodun parallel çalışmasını sağlarken, Fiber ise parallel çalışacak kodların manuel olarak planlamasının yapılmasına izin verir. Guild’ı ise bu ikisinin birlikte uygulanması ile ortaya çıkar. Şöyle diyebiliriz; Bir Guild içerisinde en az bir Thread ve onun da içerisinde en az bir Fiber bulunur. Guild içerisindeki Thread’ler paralel çalışamazken, farklı Guild’dekiler çalışabilir.&lt;/p&gt;

&lt;p&gt;Bir Guild’deki mutable bir obje başka bir Guild’den obje tarafından okunamaz ya da değiştirilemez. Bu sebeple Guild’lerin parallel çalışması sağlanır. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Guild::Channel&lt;/code&gt; ile bunu yapmak da mümkündür. Bu yöntem ile bir obje diğer Guild’de kopyalanır ve ilgili Guild’e gönderilir.&lt;/p&gt;

&lt;p&gt;Ractor (Guild) ile alakalı daha fazla bilgiye ve örneğe buradan ulaşabilirsiniz. &lt;a href=&quot;https://github.com/ko1/ruby/blob/ractor_parallel/doc/ractor.md&quot;&gt;https://github.com/ko1/ruby/blob/ractor_parallel/doc/ractor.md&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sonuçta bu özellik ile artık Ruby’de thread-safe konularına kafayı takmadan paralel işler yapabileceğiz gibi duruyor.&lt;/p&gt;

&lt;h2 id=&quot;jit&quot;&gt;JIT&lt;/h2&gt;

&lt;p&gt;Uzun adi Just In Compile olan JIT Ruby programlarının makine kodlarına dönüştürür. Diğer derleyicilerden farklı olarak bütün kod derlemez sadece kodun değiştirilen yerlerini derler. JIT ne kadar hızlanma getirir ve neler götürür bu konuda bazı çalışmalar &lt;a href=&quot;https://eregon.me/blog/2016/11/28/optcarrot.html&quot;&gt;https://eregon.me/blog/2016/11/28/optcarrot.html&lt;/a&gt; olsa da yorumlanan bir Ruby’den daha hızlı olacağı kesin.&lt;/p&gt;

&lt;p&gt;JIT’in avantajı kadar yanında getirdiği ve muhtemelen geliştirilecek bir takım dezavantajları da var. Bunlardan biri memory kullanımı diğeri ise warmup süresinin uzunluğu.&lt;/p&gt;

&lt;p&gt;Bildiğim kadarı ile JIT şuan Ruby 2.6’da var ve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-jit&lt;/code&gt; flag’i ile kullanılabiliyor. Ruby on Rails gibi büyük gem’lerde henüz kullanılmıyor diye biliyorum ancak daha küçük işler için tercih edilebilir.&lt;/p&gt;

&lt;p&gt;JIT konusu hakkında çalışan Takashi Kokubun, Ruby Rouges podcast’ine konuk olmuş. Daha fazla detayı &lt;a href=&quot;https://devchat.tv/ruby-rogues/rr-470-performance-improvement-of-ruby-3-0-jit-with-takashi-kokubun/&quot;&gt;buradan&lt;/a&gt; dinleyebilirsiniz.&lt;/p&gt;

&lt;h2 id=&quot;type-profiler--static-type-analysis&quot;&gt;Type Profiler / Static Type Analysis&lt;/h2&gt;

&lt;p&gt;Tip kontrolü ve statik tipli bir dil olmaya doğru giden Ruby, bu özelliği ile beni de heyecanlandırıyor. Dinamik bir dil olan Ruby’nin statik bir dil olma yolunda attığı adımlardan biri RBS &lt;a href=&quot;https://github.com/ruby/rbs&quot;&gt;https://github.com/ruby/rbs&lt;/a&gt; dili diyebiliriz. RBS, Ruby 3 için bir tip imzalama dili. Type’ları olan kodlar artik RBS dosyaları içine yazılmaya başlıyor ki bu da mevcut Ruby kodunun karışmasını engelliyor.&lt;/p&gt;

&lt;p&gt;Aslında şuan Sorbet projesi ile type check yapılabiliyor. Sorbet ve Ruby geliştiricileri RBS için birlikte işler çıkarmaya çalışıyorlar.&lt;/p&gt;

&lt;p&gt;Herkes RBS kullanmak zorunda değil tabiki ama tiplerin ve tip kontrolünün gelmesi Ruby’e daha fazla güç ve çeşitlilik katacaktır diye düşünüyorum. Yazılan kodun kalitesi ve hata oranı ne kadar azalsa da dinamik bir dilde program yazmak, statik bir dile göre her zaman daha hızlı olacağı da aşikar.&lt;/p&gt;

&lt;h2 id=&quot;heap-compaction-gc-improvement&quot;&gt;Heap Compaction (GC Improvement)&lt;/h2&gt;

&lt;p&gt;Ruby’de garbage collection gibi bellek yönetim işleri ile pek uğraşmaya gerek yok. Zaten en güzel yanı da bu değil mi? :) Ancak işler karmaşıklaştıkca ve programlar büyüdükce programlama dillerinin de kendi garbage collector’larında geliştirmeler yapması gerekir.&lt;/p&gt;

&lt;p&gt;Ruby 2.7 ile aslında şuan kullanılabilen heap compaction özelliği ile Ruby’de garbage collector daha verimli bir hale geldi. Bu özellik sayesinde program için memory’de kullanılmak istenen alana heap denir. Bu heap objeler için kullanıldikca veya heap içindeki objeler serbest kaldıkca memory içerisinde boşluklar oluşur ve memory dağınık bir hale gelir. Ayrılan bütün hafızayı birlikte kullanmaktansa heap içindeki kullanılan memory sıkıştırılır boşluklar da değerlendirilmiş olur.&lt;/p&gt;

&lt;h2 id=&quot;pattern-matching&quot;&gt;Pattern Matching&lt;/h2&gt;

&lt;p&gt;Ruby 2.7 ile hayatımıza giren bu özelliğe pek ısındım diyemem. Ama seveni de vardır elbet. Elixir kullananlar zaten bu özelliğe aşinadırlar. Küçük bir örnekle anlatacak olursak&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;surname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; :foo&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;surname&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;bar&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ancak eşitliğin iki tarafındaki pattern ayni olmadığı vakit sorun çıkacaktır. Örneğin &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[name, surname, 30] = [:foo, &quot;bar&quot;, 20]&lt;/code&gt; bu şekilde yaparsak hata alacağız.&lt;/p&gt;

&lt;p&gt;Pattern Matching işimize daha çok if veya when statement’larda işimize yarayacak gibi duruyor. Daha fazlası Hash’lerde ve Array’lerde de bu özellik çokça kullanılabilir. Ancak tehlikeli olan şu ki yeni syntax biraz kafa karıştırıcı ve alışması zor olabilir. Bazı karışık condition’lar için yararlı gibi duruyor ancak kullanımı o kadar kolay olduğunu söyleyemem.&lt;/p&gt;

&lt;h3 id=&quot;right-assignment&quot;&gt;Right Assignment&lt;/h3&gt;

&lt;p&gt;Neden diye sordurttan bir özellik daha. Soldan sağa kod okumaya alıştığımız için bu özellik bizlere biraz zor gelecektir.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;s1&quot;&gt;&apos;hello&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This is equivalent to foo = &apos;hello&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Burada çok anlamlı değil ama şu örnek için güzel duruyor.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;full_name&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;foo&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;bar&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;full_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;surname&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;aslında burada yapılmak istenden &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name, surname = full_name&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;sonuç&quot;&gt;Sonuç&lt;/h3&gt;

&lt;p&gt;Tüm bunlar tabiki bu kadar az değil. Çok fazla detayın olduğu ve dikkatli bakıldığında hepsi Ruby’e bir şekilde birşeyler katacak özellikler. Benim şahsi fikrim Ruby zaten rahat yazılabilen ve okunabilen bir dil. Bazı performans problemleri de halledildikten sonra daha iyi bir dil olacağı kesin. Ruby 3 ile umarim performansa yönelik geliştirmelere daha fazla önem verirler.&lt;/p&gt;

&lt;p&gt;Sevgiler.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Referanslar:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://bugs.ruby-lang.org/issues/17100&quot;&gt;https://bugs.ruby-lang.org/issues/17100&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://olivierlacan.com/posts/concurrency-in-ruby-3-with-guilds/&quot;&gt;https://olivierlacan.com/posts/concurrency-in-ruby-3-with-guilds/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://engineering.appfolio.com/appfolio-engineering/2017/12/26/ruby-3-and-jit-where-when-and-how-fast&quot;&gt;https://engineering.appfolio.com/appfolio-engineering/2017/12/26/ruby-3-and-jit-where-when-and-how-fast&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.squareup.com/blog/the-state-of-ruby-3-typing/&quot;&gt;https://developer.squareup.com/blog/the-state-of-ruby-3-typing/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackify.com/how-does-ruby-garbage-collection-work-a-simple-tutorial/&quot;&gt;https://stackify.com/how-does-ruby-garbage-collection-work-a-simple-tutorial/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.toptal.com/ruby/ruby-pattern-matching-tutorial&quot;&gt;https://www.toptal.com/ruby/ruby-pattern-matching-tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bugs.ruby-lang.org/issues/15921&quot;&gt;https://bugs.ruby-lang.org/issues/15921&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.saeloun.com/2020/08/31/ruby-adds-experimental-rightward-assignment.html&quot;&gt;https://blog.saeloun.com/2020/08/31/ruby-adds-experimental-rightward-assignment.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Ruby on Rails'da çoklu veritabanı</title>
   <link href="http://localhost:4000/2019/06/22/ruby-on-rails-da-%C3%A7oklu-veritaban%C4%B1.html"/>
   <updated>2019-06-22T20:01:00+03:00</updated>
   <id>http://localhost:4000/2019/06/22/ruby-on-rails-da-çoklu-veritabanı</id>
   <content type="html">&lt;p&gt;Merhaba. Ruby on Rails’ın son versiyonu olan 6. versiyonu ile gelen &lt;a href=&quot;https://edgeguides.rubyonrails.org/active_record_multiple_databases.html&quot;&gt;&lt;strong&gt;multiple database&lt;/strong&gt;&lt;/a&gt; özelliği ile artık çoklu veritabanı yönetimi yapılabiliyor.&lt;/p&gt;

&lt;p&gt;Bu durumun birçok anlamı var;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bir veritabanının replikasını oluşturup, onlar üzerinde çalışmalar yapabilmek.&lt;/li&gt;
  &lt;li&gt;Birincil ve replika veritabanları arasında HTTP metotları ile otomatik geçişler yapabilmek.&lt;/li&gt;
  &lt;li&gt;Çoklu veritabanlarında Rails’ın task’larını çalıştırabilmek.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bunların yanında ise henüz desteklenmeyen özellikler arasında ise &lt;strong&gt;sharding&lt;/strong&gt; ve replikalar arası &lt;strong&gt;load balancing&lt;/strong&gt; başta geliyor.&lt;/p&gt;

&lt;p&gt;Çoklu veritabanı için ayarları yapmak Rails 6’da çok kolay. Daha önce Ruby on Rails kullananlar bilecektir ki veritabanı ayar dosyası &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/database.yml&lt;/code&gt;‘da tutulur. Bu dosya üzerinde yeni bir takım eklemeler ile uygulamanız için çoklu veritabanlarını tanımlayabilirsiniz.&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;production&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;primary&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;my_primary_database&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;root&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;primary_replica&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;my_primary_database&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;root_readonly&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;replica&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;cities&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cities_database&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cities_root&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;migrations_paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;db/cities_migrate&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;cities_replica&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;my_cities_database&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cities_readonly&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;replica&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu noktada birkaç konuya değinmek ve dikkat etmek gerekiyor. Öncelikle bir veritabanı eğer replika bir veritabanı ise &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;replica: true&lt;/code&gt; yazmak gerekiyor. Bunun yanında replika veritabanlarının adlarının aynı olması şart değil ancak aynı veri üzerinden çalışmalar olacağı için adlarının aynı olmasının faydası var.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;migration_paths&lt;/code&gt; Rails’da veritabanı &lt;strong&gt;migration&lt;/strong&gt;‘larının yerini söylemek için belirtmemiz gerekiyor. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cities &lt;/code&gt; veritabanı bir
&lt;strong&gt;migration&lt;/strong&gt; çalıştırmak istersek &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--database&lt;/code&gt; opsiyonu ile hangi dosyada çalışmaların olacağını belirtebiliyoruz.&lt;/p&gt;

&lt;p&gt;`
$ rails g migration CreateTowns name:string –database cities
`&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Model&lt;/strong&gt; seviyesinde ise birkaç ayara ihtiyac duyuyoruz. Burada önemli olan hangi veritabanlarının ne görevler yapacağı.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CitiesBase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;abstract_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;connects_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;database: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;writing: :cities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;reading: :cities_replica&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;ApplicationRecord&lt;/strong&gt;‘u da güncellememiz gerekiyor.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationRecord&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;abstract_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;connects_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;database: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;writing: :primary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;reading: :primary_replica&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails -T&lt;/code&gt; komutu ile de bütün &lt;strong&gt;task&lt;/strong&gt;‘ları görebilirsiniz. Hangi veritabanında çalışma yapmak istiyorsanız, adını sona ekleyerek yapabilirsiniz. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails db:migrate:status:cities&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Ruby on Rails ile çoklu veritabanı kullanımı henüz RC versiyonda olasa da projelerde kullanılabilir durumda. Github ekibi tarafından geliştirilen ve şu an kullanılan bu özellik Ruby on Rails’ın gücünü daha da artıracak gibi duruyor.&lt;/p&gt;

&lt;p&gt;Sevgiler.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;strong&gt;Referanslar:&lt;/strong&gt;&lt;/small&gt;
&lt;br /&gt;
&lt;small&gt;&lt;em&gt;https://edgeguides.rubyonrails.org/active_record_multiple_databases.html&lt;/em&gt;&lt;/small&gt;
&lt;small&gt;&lt;em&gt;https://www.citusdata.com/blog/2019/05/23/rails-6-multiple-databases/&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ruby on AWS Lambda</title>
   <link href="http://localhost:4000/2018/12/19/ruby-on-aws-lambda.html"/>
   <updated>2018-12-19T00:00:00+03:00</updated>
   <id>http://localhost:4000/2018/12/19/ruby-on-aws-lambda</id>
   <content type="html">&lt;p&gt;Merhaba. Yakın zamanda duyurulan Aws Lambda’dan bahsetmek istiyorum.&lt;/p&gt;

&lt;p&gt;Aws Ruby SDK’sı Aws üzerinde işlemler yapmamıza yarıyor. Bu SDK ile Amazon’un Amazon EC2, S3, SQS, SNS gibi servislerini kullanabiliyoruz. Yeni gelişmeler ile Amazon Lambda servisini de artık kullanabilir oluyoruz. Bu geliştirme ile artık Lambda fonksiyonları Ruby gibi kullanabilir ve AWS üzerinde çalıştırabiliriz. Bu girişten sonra küçük bir örnek yapalım.&lt;/p&gt;

&lt;p&gt;Öncelikle &lt;a href=&quot;https://console.aws.amazon.com/lambda/home&quot;&gt;Lambda Console&lt;/a&gt;‘u açmak gerekiyor. Bu sayfada sırasıyla yapmamız gerekenler,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create function&lt;/code&gt;‘a tıklıyoruz.&lt;/li&gt;
  &lt;li&gt;Küçük bir örnek yapabilmek için &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Author from scratch&lt;/code&gt;‘i seçiyoruz.&lt;/li&gt;
  &lt;li&gt;Function’ımıza kolay bir isim verdikten sonra, Ruby versiyonunu seçiyoruz.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Role&lt;/code&gt; için ise &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create a new role from one or more templates.&lt;/code&gt; diyip, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Role&lt;/code&gt; kısmına bir rol adı yazıyoruz.&lt;/li&gt;
  &lt;li&gt;Sonrasında alttaki &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create function&lt;/code&gt;‘a basıp Lambda function’ımınızın oluşturulduğunu görüyoruz.&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;display: flex; justify-content: center;&quot;&gt;&lt;img src=&quot;/assets/img/aws1.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Lambda function’ı create edildikten sonraki açılan ekrandan her türlü kod düzenlemesini yapabilir, diğer servisler ile function’ı bağlayabilir ve servis ayarlarınızı yapabilirsiniz. Diğer tab yani &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Monitoring&lt;/code&gt; tab’ınıdan ise function’ının kullanımı ile alakalı sayıları alabilir, log servislerini kullanabilirsiniz.&lt;/p&gt;

&lt;p&gt;Alt tarafa code editor göreceksiniz. Burada lambda function’ımızı düzeltebiliriz. Gördüğümüz kod ise basit bir JSON önden lambda_handler isimli bir function. Bu kodu çalıştırmak için yapmamız gereken &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Test&lt;/code&gt;‘e basıp, bir test event’i set edebilmek. Şimdilik biz bu alanı &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{}&lt;/code&gt; şeklinde tanımlıyoruz ve bir &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Event name&lt;/code&gt; verip, create ediyoruz. Sonrasında tekrar &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Test&lt;/code&gt; dediğimizde, Ruby Lamba Function’nın çalıştığını görebiliyoruz.&lt;/p&gt;

&lt;div style=&quot;display: flex; justify-content: center;&quot;&gt;&lt;img src=&quot;/assets/img/aws2.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Sevgiler.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ruby State Design Pattern</title>
   <link href="http://localhost:4000/2018/12/04/ruby-state-design-pattern.html"/>
   <updated>2018-12-04T00:00:00+03:00</updated>
   <id>http://localhost:4000/2018/12/04/ruby-state-design-pattern</id>
   <content type="html">&lt;p&gt;Merhaba. Bugün &lt;strong&gt;State Design Pattern&lt;/strong&gt;‘ın Ruby’deki kullanımından bahsetmek istiyorum.&lt;/p&gt;

&lt;p&gt;State design pattern, behavior pattern altında tanımlanır. Bu pattern’da bir nesnenin farklı durumlarda farklı şekillerde çalışmasını düzenlenir. Yani bir nesnenin durumu değiştiğinde o nesnenin çalışma şekli değişir. Bu duruma en güzel örnek trafik ışıklarını verebiliriz. Görme engelliler için trafik ışıklarını düşünün, kırmızı, sarı ve yeşil yandığında, durun, bekleyin ve geçin diyor. Işıklar arası geçişlerde ise birkaç saniye boşluk vererek, diğer ışığa geçiyor. Bu durumda ışıkların state’leri değişiyor ve yapacakları eylemler de state’lere göre belli oluyor.&lt;/p&gt;

&lt;p&gt;State design pattern’ın 3 ana component’dan oluşuyor.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Context Class: Mevcut durumu bilen class.&lt;/li&gt;
  &lt;li&gt;State Class: tanımlanmış state’lerin yapacağı işleri bilen class.&lt;/li&gt;
  &lt;li&gt;State class’ından türetilmiş bütün durumlar için olan class’lar.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Peki bu durumun yararı nedir? Bütün state’ler kendi durumlarını yapacakları işi ve sonraki state’i biliyor. Mevcut state’in ne olduğuyla ilgilenmiyor. Aslında bu design yerine if/else de kullanıbilir ancak hem mimari olarak hem de kodu okumak anlamında if/else kullanmak daha zor olacaktır.&lt;/p&gt;

&lt;p&gt;Şimdi bu tanımları Ruby’de trafik ışıkları örneği ile nasıl yazabiliriz, ona bakalım.&lt;/p&gt;

&lt;p&gt;Öncelikle bir context class’ına ihtiyacımız var. TrafficLight class’ını context olarak belirliyoruz.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TrafficLight&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;beep&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start_timer&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sonrasında ise bir State class’ı tanımlıyoruz.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;State&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;light&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@light&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;light&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;beep&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next_state&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start_timer&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Green state ve diğerleri için şu şekilde bir class tanımlayabiliriz.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Green&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;State&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;beep&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Color is now green&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next_state&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@light&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Yellow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start_timer&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_state&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Yellow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;State&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;beep&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Color is now yellow&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next_state&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@light&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start_timer&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_state&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Red&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;State&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;beep&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Color is now red&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next_state&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@light&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start_timer&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_state&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Artık her state ne yapacağı ve kendisinden sonra hangi state’in geleceğini biliyor.&lt;/p&gt;

&lt;p&gt;Daha gerçekçi ve çalışan örnek için &lt;a href=&quot;https://github.com/ryanb/ruby-warrior&quot;&gt;RubyWarrior&lt;/a&gt;‘ı inceleyebilirsiniz.&lt;/p&gt;

&lt;p&gt;Eğer Ruby projelerinizde state machine kullanmak istiyorsanız &lt;a href=&quot;https://github.com/aasm/aasm&quot;&gt;AASM&lt;/a&gt; deneyebilirsiniz. Bu gem ile state’lerin durumlarını takip edebilir, callback’ler ile event’leri yönetebilirsiniz.&lt;/p&gt;

&lt;p&gt;Sevgiler.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;strong&gt;Referanslar:&lt;/strong&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;em&gt;https://www.rubyguides.com/2018/12/state-machines/?tl_inbound=1&amp;amp;tl_target_all=1&amp;amp;tl_form_type=1&amp;amp;tl_period_type=1&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ruby 2.6 ile Gelenler</title>
   <link href="http://localhost:4000/2018/11/28/ruby-2-6-ile-gelenler.html"/>
   <updated>2018-11-28T00:00:00+03:00</updated>
   <id>http://localhost:4000/2018/11/28/ruby-2-6-ile-gelenler</id>
   <content type="html">&lt;p&gt;Merhaba, Ruby’nin yeni versiyonu 2.6 25 Aralık 2018’de yayınlanacak. Öncesinde preview’dan yeni gelen özelliklerin bazılarına yakından bakalım.&lt;/p&gt;

&lt;h3 id=&quot;arrayunion--arraydifference&quot;&gt;Array#union &amp;amp; Array#difference&lt;/h3&gt;
&lt;p&gt;Array class’ına gelen iki metot ile iki array arasındaki farkı görebilir ve onları birleştirebiliriz.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[1,2,3,4,5].difference([3])
=&amp;gt; # [1, 2, 4, 5]
[1,2,3,4,5].union([5,6,7])
=&amp;gt; # [1, 2, 3, 4, 5, 6, 7]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;endless-ranges&quot;&gt;Endless Ranges&lt;/h3&gt;
&lt;p&gt;Diğer versiyonların aksine 2.6 ile birlikte endless range’in yazımı değişti. Artık yeni endless range aşağıdaki gibi olacak.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(1..)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;enumerablearithmethicsequence&quot;&gt;Enumerable::ArithmethicSequence&lt;/h3&gt;
&lt;p&gt;Artık iki yeni ArithmethicSequence metodumuz var. Bunlar  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Range#step&lt;/code&gt; ve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Numeric#step&lt;/code&gt; örnekleyecek olursak;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(1..10).step(2) == (1..10).step(2)
=&amp;gt; # false - Ruby 2.5 (and older)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(1..10).step(2) == (1..10).step(2)
=&amp;gt; # true - Ruby 2.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;merge-hash-with-multiple-arguments&quot;&gt;Merge Hash With Multiple Arguments&lt;/h3&gt;
&lt;p&gt;Hash’leri merge etmek için artık peş peşe &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;merge&lt;/code&gt; yazmaya gerek yok.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a = { a: 1 }
b = { b: 2 }
c = { c: 3 }
a.merge(b, c)
=&amp;gt; # {:a=&amp;gt;1, :b=&amp;gt;2, :c=&amp;gt;3}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sevgiler.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Gmail Eklenti Örneği</title>
   <link href="http://localhost:4000/2018/01/23/gmail-eklenti-%C3%96rne%C4%9Fi.html"/>
   <updated>2018-01-23T11:52:00+03:00</updated>
   <id>http://localhost:4000/2018/01/23/gmail-eklenti-Örneği</id>
   <content type="html">&lt;p&gt;Merhaba. Daha önce &lt;a href=&quot;https://enderahmetyurt.com/2018/01/09/gmail-e-eklenti-yazmak.html&quot;&gt;Gmail add-on&lt;/a&gt; nedir? Bu konudan biraz bahsetmiştim. Şimdi ise küçük bir uygulama ile giriş yapıp daha pratik birşeyler göstermek istiyorum.&lt;/p&gt;

&lt;p&gt;Öncelikle ihtiyacımız olan add-on’u yazmak için gerekli olan bir ortam. Google bize bu ortamı &lt;a href=&quot;https://script.google.com/&quot;&gt;https://script.google.com/&lt;/a&gt; ile veriyor. Sonrasında ise uygulamanın ayarlarının ve kütüphanelerinin bağımlılıklarının bulunduğu &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manifest&lt;/code&gt; dosyasını tanımlamak gerekiyor. Son olarak ise kodu yani &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CardService&lt;/code&gt;‘i yazmaya başlıyoruz.&lt;/p&gt;

&lt;p&gt;Manifest dosyasını &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;appscript.json&lt;/code&gt; içine koymak gerekiyor. Default olarak bu dosya kod yazdığımız yerde görünür değil o yüzden &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View &amp;gt; Show manifest file&lt;/code&gt; diyoruz ve aşağıdaki kodu dosyaya ekliyoruz.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;gmail&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Quickstart Toolbar Label&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;logoUrl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://www.example.com/hosted/images/2x/my-icon.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;primaryColor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#4285F4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;secondaryColor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#4285F4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;contextualTriggers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;unconditional&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;onTriggerFunction&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;getContextualAddOn&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TRUSTED_TESTER_V2&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Gördüğünüz gibi bu dosya içinde basit bir şekilde config ayarları yapılmış durumda. Uygulamanın adı, logosu, renkler ve versiyon gibi basit özelliklerin yanında asıl önemli olan uygulama ilk başladığında hangi metodun çalışması gerektiğini söyleyen &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onTriggerFunction&lt;/code&gt; parametresi. Bu parametre uygulama ayağa kalkınca ilk çalışması gereken metodu belirtiyor ve artık yapmamız gerekenler bu metot içinden çalışmaya başlıyor.&lt;/p&gt;

&lt;p&gt;Google bizim için &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Code.gs&lt;/code&gt; adında bir google script dosyası açıyor ve aslında uygulama için ilk çalışan dosya burası oluyor. Bu dosya içine uygulamamız ile alakalı kodları yazıyoruz. Manifest dosyasında belirttiğimiz &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getContextualAddOn&lt;/code&gt; metodunu bu dosya içinde yazmaya başlıyoruz.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getContextualAddOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Activate temporary Gmail add-on scopes, in this case to allow&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// message metadata to be read.&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;accessToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;messageMetadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;GmailApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setCurrentMessageAccessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;messageId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;messageMetadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;messageId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GmailApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getMessageById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;messageId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getSubject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getFrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Create a card with a single card section and two widgets.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Be sure to execute build() to finalize the card construction.&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exampleCard&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CardService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;newCardBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CardService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;newCardHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Example card&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CardService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;newCardSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addWidget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CardService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;newKeyValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                         &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setTopLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Subject&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                         &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addWidget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CardService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;newKeyValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                         &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setTopLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;From&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                         &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// Don&apos;t forget to build the Card!&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exampleCard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yukarıdaki kodda amacımız bir email içeriğine ulaşabilmek. Bunun için Gmail’in servislerini kullanabilmemiz lazım. O yüzden Gmail’e authenticate olmamız gerekiyor. Zaten uygulama çalışmaya başladığı zaman bu bize soruluyor ve onay verildikten sonra kod çalışmaya başlıyor. Sonrasında ise Card servisi devreye giriyor. Daha önce de anlattığım gibi Gmail add-on için UI desteği Card ile geliyor ve gelen veriyi kullanıcıya göstermek için öncellikle bir Card tanımlıyoruz. Sonrasında ise gerekli component’ları koyup son olarak Card’ı &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build()&lt;/code&gt; methodu ile oluşturuyoruz. Burası çok önemli. Eğer Card’ı hazırlayıp, build metodunu çağırmazsak isek istediğimiz sonucu alamayız.&lt;/p&gt;

&lt;p&gt;Biraz Card’lardan bahsetmek gerekirse. Card’lar onlar için tanımlanmış özel &lt;strong&gt;widget&lt;/strong&gt;‘lardan oluşuyor. Her action için yeni bir Card tanımlayabilir ve özel widget’lar atayabiliriz içerlerine. CardBuilder class’ı yeni bir Card tanımlamamıza yarıyor. Her Card &lt;strong&gt;header&lt;/strong&gt; ve &lt;strong&gt;section&lt;/strong&gt;‘lardan oluşuyor. Bu section’lar içine kullanıcı ile kurulacak action’ları tanımlama adına widget’ları ekleyebiliyoruz. Kısacası bir Card oluşturmak için sırasıyla,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Widget’ı oluşturmak&lt;/li&gt;
  &lt;li&gt;Section’a widget’ı eklemek&lt;/li&gt;
  &lt;li&gt;Section’a tüm widget’ları tanımlayana kadar devam etmek,&lt;/li&gt;
  &lt;li&gt;Son olarak ise section’ı Card’a eklemek gerekiyor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gelelim test ve deployment konusuna. Farklı &lt;a href=&quot;https://developers.google.com/apps-script/concepts/deployments&quot;&gt;deployment yöntemleri&lt;/a&gt; mevcut fakat development tarafında hızlı test edebilmemiz için &lt;strong&gt;Head Deployments&lt;/strong&gt;‘dan bahsedeceğim.&lt;/p&gt;

&lt;p&gt;Eğer bütün kodu düzgün bir şekilde yazdıysak script ekranından &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Publish &amp;gt; Deploy from manifest&lt;/code&gt; diyerek açılan pop-up’dan &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Lastest Version (HEAD)&lt;/code&gt; satırından &lt;strong&gt;Get ID&lt;/strong&gt; linkine tıklayarak açılan pencereden &lt;strong&gt;Deployment ID&lt;/strong&gt;‘yi kopyalayıp, alıyoruz ve ayrı bir pencerede Gmail hesabımı açıyoruz.&lt;/p&gt;

&lt;p&gt;Gmail için ayarlarımızın yapıldığı &lt;strong&gt;Settings&lt;/strong&gt; sayfasına geliyoruz. Buradan &lt;strong&gt;Add-on&lt;/strong&gt; sekmesinde yer alan &lt;strong&gt;Developer add-ons&lt;/strong&gt; alanına biraz önce kopyaladığımız Deployment ID’yi yapıştırıyoruz ve sonrasında Install diyoruz. Sonrasında Inbox’a gidip sayfası yeniliyoruz.&lt;/p&gt;

&lt;p&gt;Inbox içinden herhangi bir email’e tıkladığımız zaman sağ tafta uygulama görülecektir. Daha önce de belirttiğim gibi Gmail servislerini kullanmak için Gmail’e izin vermemiz gerekiyor. O yüzden &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AUTHORIZE ACCESS&lt;/code&gt; buttonuna tıklayıp, uygulama için yetkilendirme izinini veriyoruz. Burada https ile bağlanmadığımız ve uygulamamız development ortamında olduğu için bir güvenlik sorunu çıkıyor olabilir. Bu uyuglama size ait olduğu için kullanmaya devam et diyerek Gmail servislerinin bilgilerimize ulaşmasına izin verebiliriz. Sonrasında uygulama Card’ı yeniden yükleniyor ve uygulamanın çalıştığını görebiliriz.&lt;/p&gt;

&lt;div style=&quot;display: flex; justify-content: center;&quot;&gt;&lt;img src=&quot;/public/images/gmail-add-on-ss.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Sevgiler.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;
&lt;em&gt;Referanslar:&lt;/em&gt;
&lt;em&gt;https://developers.google.com/gmail/add-ons/how-tos/building&lt;/em&gt;
&lt;/small&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Gmail'e Eklenti Yazmak</title>
   <link href="http://localhost:4000/2018/01/09/gmail-e-eklenti-yazmak.html"/>
   <updated>2018-01-09T00:00:00+03:00</updated>
   <id>http://localhost:4000/2018/01/09/gmail-e-eklenti-yazmak</id>
   <content type="html">&lt;p&gt;Merhaba. Gmail’de işlerimizi halletmek adına birkaç tarayıcı eklentisi kullanıyoruz.&lt;/p&gt;

&lt;p&gt;Fakat bu eklentiler kimi zaman tarayıcılar değişince iyi çalışmıyor ya da alternatifi bulunamıyor veya mobil uygulamalar üzerinde hiçbir şekilde var olmuyor. 2017 yılının sonuna doğru Google, Gmail için artık eklenti yazımını mümkün kıldı. İsteyenler artık tarayıcı eklentisi yazar gibi Gmail için eklenti yazabilecek. Peki bu Gmail eklentisi tam olarak ne anlama geliyor, ve bu iş nasıl yapılıyor?&lt;/p&gt;

&lt;p&gt;Gmail eklentileri emailler yolu ile yapılan günlük işlerinizi aslında kolaylaştırıyor. Örneğin, Asana uygulamasının eklentisi ile size gelen bir emaili Asana’da bir iş olarak hızlı bir şekilde açabilir ve detaylandırabilirsiniz. Eskiden olsaydı Asana’nın ekranlarına girip bu işlerini halletmeniz gerekecektir. Bunun gibi örnekleri çoğaltabiliriz. Kısacası Gmail eklentileri zamanı ve işleri kısaltmamıza yarıyor.&lt;/p&gt;

&lt;p&gt;Kendisine ait bir UI ekranı olan eklentileri direk Google servislerine bağlayabilir, her türlü istediğiniz veriyi çekip, yazabilirsiniz. Bunların dışında Google servisi olmayan dışarıdan servislere de (Asana örneği gibi) bağlanabilir, veri paylaşımı yapabilirsiniz. Ayrıca başka cihazlar üzerinden eklentileri yönetebilir ve cihazlar arası sorunsuz bir şekilde çalışma sağlayabilirsiniz.&lt;/p&gt;

&lt;p&gt;Google bu servisi sadece Gmail için vermiyor. Bütün Google servisleri Drive, Docs, Sheets için de ayrı ayrı uygulamalar yazabilirsiniz. Bu eklentileri yazmak için &lt;a href=&quot;https://developers.google.com/apps-script/&quot;&gt;Apps Script&lt;/a&gt; adında Javascript’e çok benzeyen bir programlama dili kullanılıyor. Bu dilin sağladığı kütüphaneler sayesinde eklentiler geliştiriliyor ve uygulamalar arası veri akışı sağlanabiliyor.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;float: left; width: 65%; margin-right: 10px;&quot; src=&quot;https://developers.google.com/gmail/add-ons/images/top-card-graphic-01.png&quot; /&gt; Gmail eklentileri içinde oluşan widget’lar ortaya çıkıyor. Bu widget’ler ise &lt;a href=&quot;https://developers.google.com/gmail/add-ons/concepts/cards&quot;&gt;Card&lt;/a&gt; adı verilen kavram üzerinde yaşıyor. Bu Card’lar eklentinin UI’ını oluşturuyor ve bütün eklenti ve eklentinin diğer sayfaları bu Card’lar üzerinde yaşıyor. Bir eklenti içinde birçok Card tanımlanabilir ve bu Card’lar üzerinde text, input alanları, button’lar gibi birçok element eklenebilir. Card’lar ile web ve mobile için ayrı ayrı uygulamaya yazmaya gerek kalmıyor. Bir eklenti cross-platfrom çalışabiliyor. Burada küçük bir not düşmek istiyorum. Bugün itibari ile bu eklentiler henüz &lt;strong&gt;iOS cihazlarda çalışmıyor.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Google bu her konuda olduğu gibi bu konu ile de alakalı müthiş bir doküman hazırlamış. Eğer konuya ilgi duyuyorsanız &lt;a href=&quot;https://developers.google.com/gmail/add-ons/how-tos/building&quot;&gt;buradan&lt;/a&gt; başlayabilirsiniz. Ayrıca Gmail için de hazırlanmış örnek eklentilere &lt;a href=&quot;https://github.com/googlesamples/gmail-add-ons-samples&quot;&gt;buradan&lt;/a&gt; erişebilirsiniz. Çok daha fazla bilgi almak istiyorsanız Gmail’in resmi eklenti &lt;a href=&quot;https://developers.google.com/gmail/add-ons/&quot;&gt;sayfasını&lt;/a&gt; ziyaret edebilirsiniz.&lt;/p&gt;

&lt;p&gt;Sevgiler.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;em&gt;Image: https://developers.google.com/gmail/add-ons/&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ruby 2.5 ile Gelenler</title>
   <link href="http://localhost:4000/2017/12/30/ruby-2-5-ile-gelenler.html"/>
   <updated>2017-12-30T00:00:00+03:00</updated>
   <id>http://localhost:4000/2017/12/30/ruby-2-5-ile-gelenler</id>
   <content type="html">&lt;p&gt;Merhaba, Ruby en son versiyonu olan 2.5 ile yeni yıla girmeden karşımıza çıktı. Bu versiyon ile ne gibi özellikler geldi kısaca bakalım.&lt;/p&gt;

&lt;h3 id=&quot;beginende-gerek-kalmadı&quot;&gt;Begin/End’e gerek kalmadı&lt;/h3&gt;

&lt;p&gt;Bu özellik ile artık &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;begin end&lt;/code&gt; block’u yazmak zorunda kalmıyoruz.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 2.4&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rescue&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;else&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;ensure&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ensure&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 2.5&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rescue&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;else&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ensure&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ensure&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;backtrace-ve-error-messageın-sıralaması-değişti&quot;&gt;Backtrace ve error message’ın sıralaması değişti&lt;/h3&gt;
&lt;p&gt;Hata masajları ve nerede hata olduğunu gösteren mesajlar artık tam tersi şekilde gelmeye başladı. Bu sanırım daha açıklayıcı olacak gibi geliyor bana. Sanırım bu özellikle 2.5 ile gelse bile daha çok deneysel bir özellik olduğu söyleniyor.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 2.4&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# NameError: undefined local variable or method `name&apos; for main:Object&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   from (irb):1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   from /Users/ender/.rvm/rubies/ruby-2.4.2/bin/irb:11:in `&amp;lt;main&amp;gt;&apos;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 2.5&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Traceback (most recent call last):&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#         2: from /Users/ender/.rvm/rubies/ruby-2.5.0/bin/irb:11:in `&amp;lt;main&amp;gt;&apos;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#         1: from (irb):1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# NameError (undefined local variable or method `name&apos; for main:Object)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;stringdelete_prefixdelete_suffix&quot;&gt;String#delete_prefix/delete_suffix&lt;/h3&gt;

&lt;p&gt;String sınıfı için iki yeni metot geldi. Gerekli bir metot mu bilemiyorum ama zaman zaman işe yarayabilir gibi duruyor.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ender&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete_prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;en&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;der&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;minder&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete_prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;en&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;minder&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ender&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete_suffix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;er&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;end&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;deriz&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete_suffix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;er&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;deriz&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;bir-başka-alias-daha&quot;&gt;Bir başka alias daha&lt;/h3&gt;
&lt;p&gt;unshift/push’un alias’ı prepend/append artık bizlerle.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prepend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [1, 2, 3, 4]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [1, 2, 3, 4]&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [1, 2, 3, 4]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [1, 2, 3, 4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;hashtransform_keystransform_keys&quot;&gt;Hash#transform_keys/transform_keys!&lt;/h3&gt;
&lt;p&gt;Hash’e yeni ve kullanışlı metotlar geldi. Bu metotlar aşağıdaki gibi çalışıyor.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;a: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;b: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transform_keys&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; { &apos;a&apos; =&amp;gt; 1, &apos;b&apos; =&amp;gt; 2 }&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;a: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;b: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transform_keys!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; { &apos;a&apos; =&amp;gt; 1, &apos;b&apos; =&amp;gt; 2 }&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; { &apos;a&apos; =&amp;gt; 1, &apos;b&apos; =&amp;gt; 2 }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Tabiki bütün özellikler bunlarla sınırlı değil. Bütün detaylara buradan &lt;a href=&quot;https://github.com/ruby/ruby/blob/v2_5_0_preview1/NEWS&quot;&gt;ulaşabilirsiniz.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sevgiler.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Ruby 2.4 Binding#irb</title>
   <link href="http://localhost:4000/2016/11/10/ruby2-4-binding-irb.html"/>
   <updated>2016-11-10T00:00:00+03:00</updated>
   <id>http://localhost:4000/2016/11/10/ruby2-4-binding-irb</id>
   <content type="html">&lt;p&gt;Hello! &lt;a href=&quot;https://www.ruby-lang.org/en/news/2016/11/09/ruby-2-4-0-preview3-released/&quot;&gt;Ruby2.4.0.preview3&lt;/a&gt; was released yesterday. There are some really cool features in it. I will mention one of these.&lt;/p&gt;

&lt;p&gt;It is about debugging or open a REPL session. As you know before that release, Ruby developers use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt; or other lovely gem &lt;a href=&quot;https://github.com/pry/pry&quot;&gt;pry&lt;/a&gt; to debug. For now &lt;a href=&quot;https://github.com/ruby/ruby/commit/493e48897421d176a8faf0f0820323d79ecdf94a&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binding#irb&lt;/code&gt;&lt;/a&gt; provides to debug in your application.&lt;/p&gt;

&lt;p&gt;First, we need to install latest Ruby version. We can do it via RVM.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;2.4.0-preview3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Don’t forget to select the right version.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm use 2.4.0-preview3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we can test that feature with a small Ruby program.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;irb&apos;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;irb&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;ender&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ruby24p3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rb&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;2.4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preview3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;001&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;ender&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it. After Ruby 2.4 we won’t need to write &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt; we can open a REPL in anytime.&lt;/p&gt;

&lt;p&gt;Cheers.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ruby 2.4 String#concat, Array#concat and String#prepend Multiple Arguments</title>
   <link href="http://localhost:4000/2016/11/05/ruby-2-4-string-concat-array-concat-and-string-prepend-multiple-arguments.html"/>
   <updated>2016-11-05T00:00:00+03:00</updated>
   <id>http://localhost:4000/2016/11/05/ruby-2-4-string-concat-array-concat-and-string-prepend-multiple-arguments</id>
   <content type="html">&lt;p&gt;Merhaba. Ruby 2.4’den önceki sürümler String ve Array için tanımlı #concat metotu birleştirme işlemini parametre almadan yapıyor.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; World&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;Hello World&quot;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;s&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;l&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;e&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [&quot;a&quot;, &quot;s&quot;, &quot;l&quot;, &quot;e&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Aynı şeklide String için tanımlı #prepend metotu da başa ekleme işlemi yapıyor.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;World&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prepend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;Hello World&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu sürümler için bu metotlara parametre vermeyi denersek,&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; World&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; ArgumentError: wrong number of arguments (2 for 1)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Argüman hatası alıyoruz.&lt;/p&gt;

&lt;p&gt;Ruby 2.4 ile artık bu metotlara çoklu argüman geçebiliriz.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; World&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;Hello World!&quot;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;s&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;l&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;e&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;f&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [&quot;a&quot;, &quot;s&quot;, &quot;l&quot;, &quot;e&quot;, &quot;f&quot;]&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;World!&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prepend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Ruby,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; Hello &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;Ruby, Hello World!&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sevgiler.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;em&gt;Referans&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.bigbinary.com/2016/10/28/string-array-concat-and-string-prepend-take-multiple-arguments-in-ruby-2-4.html&quot;&gt;https://blog.bigbinary.com/2016/10/28/string-array-concat-and-string-prepend-take-multiple-arguments-in-ruby-2-4.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Ruby 2.4 Hash#compact</title>
   <link href="http://localhost:4000/2016/11/05/ruby-2-4-hash-compact.html"/>
   <updated>2016-11-05T00:00:00+03:00</updated>
   <id>http://localhost:4000/2016/11/05/ruby-2-4-hash-compact</id>
   <content type="html">&lt;p&gt;Merhaba. Ruby 2.4 yazılarına devam ediyoruz.&lt;/p&gt;

&lt;p&gt;Ruby’de nil value’e sahip bir key ile hash oluşturduğunuzda Ruby bu değeri hash’den kaldırıyor.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ender&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; {:name=&amp;gt;&quot;ender&quot;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Active Support ile value’su nil olan key’leri dönmesini Hash#compact ile sağlayabiliyorsuz. Bu özellik artık Ruby 2.4 ile birlikte geliyor.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ender&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compact&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; {:name=&amp;gt;&quot;ender&quot;, :age=&amp;gt;nil}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sevgiler.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;em&gt;Referans&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.bigbinary.com/2016/10/24/hash-compact-and-hash-compact-now-part-of-ruby-2-4.html&quot;&gt;https://blog.bigbinary.com/2016/10/24/hash-compact-and-hash-compact-now-part-of-ruby-2-4.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Ruby 2.4 Enumerable#sum</title>
   <link href="http://localhost:4000/2016/11/02/ruby-2-4-enumerable-sum.html"/>
   <updated>2016-11-02T00:00:00+03:00</updated>
   <id>http://localhost:4000/2016/11/02/ruby-2-4-enumerable-sum</id>
   <content type="html">&lt;p&gt;Merhaba! &lt;a href=&quot;https://www.ruby-lang.org/en/news/2016/09/08/ruby-2-4-0-preview2-released/&quot;&gt;Ruby 2.4 previewleri&lt;/a&gt; bundan yakın bir zaman önce çıktı ve bir takım yenilikler ile birlikte geldiler.&lt;/p&gt;

&lt;p&gt;Kısa kısa Ruby 2.4 ile gelen yeniliklerden ve değişikliklerden bahsedelim. Bir Array’de ya da Hash’de elementleri toplamak yapmak için Active Support’da tanımlı olan &lt;a href=&quot;https://github.com/rails/rails/blob/3d716b9e66e334c113c98fb3fc4bcf8a945b93a1/activesupport/lib/active_support/core_ext/enumerable.rb#L2-L27&quot;&gt;Enumerable#sum&lt;/a&gt;‘ı kullanıyoruz.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1,2,3].sum
&lt;span class=&quot;c&quot;&gt;#=&amp;gt; 6&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&apos;y&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;.sum
&lt;span class=&quot;c&quot;&gt;#=&amp;gt; &quot;eay&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ancak bundan sonra bu metotu Ruby 2.4 birlikte Active Support’a ihtiyacımız kalmadan kullanabileceğiniz. Fakat sadece integer için geçerli olan bu metot Active Support’daki gibi string ya da karakteler için geçerli değil. Üzülmeyelim bu metota parametre geçilebildiği için eğer işimiz sayılar ile değilse,&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&apos;y&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;.sum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#=&amp;gt; &quot;eay&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;yaparak işimizi görebiliriz.&lt;/p&gt;

&lt;p&gt;Sevgiler.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;em&gt;Referans&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.bigbinary.com/2016/11/02/ruby-2-4-introduces-enumerable-sum.html&quot;&gt;https://blog.bigbinary.com/2016/11/02/ruby-2-4-introduces-enumerable-sum.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Block, Proc, Lambda</title>
   <link href="http://localhost:4000/2016/05/19/block-proc-lambda.html"/>
   <updated>2016-05-19T00:00:00+03:00</updated>
   <id>http://localhost:4000/2016/05/19/block-proc-lambda</id>
   <content type="html">&lt;p&gt;Merhaba! Ruby’nin en güçlü özelliklerinden biri bloklardır. Diğer dillerin aksine Ruby’de blokları anlamak ve kullanmak kolay ve basittir.&lt;/p&gt;

&lt;p&gt;Ruby’de bloklarını kullanmak için iki yöntemimiz var,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do&lt;/code&gt; ve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;end&lt;/code&gt; arasına kodlarımızı yazmak.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{}&lt;/code&gt; bu iki parantez arasına kodlarımızı yazmak.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Örnek vericek olursak,&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; my_array &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2,4,6]

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; my_array.map! &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |m|
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  m &lt;span class=&quot;k&quot;&gt;**&lt;/span&gt; 3
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; end
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;8, 64, 216]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu işlemi tek satırda parantezler içinde de yapmak mümkündür.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; my_array &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2,4,6]
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; my_array.map! &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; |m| m &lt;span class=&quot;k&quot;&gt;**&lt;/span&gt; 3 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;8, 64, 216]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ruby’de hazır block’ların dışında kendi blocklarımızı da yazabiliriz.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each_with_index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Örnek, Sıktı Bağdat’ın Ruby kitabından alınmıştır.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yukarıdaki örnekte &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;change&lt;/code&gt; metotuna block’u parametre olarak gönderiyoruz. Ruby’de bir metota block’un parametre olarak geçtiğini belirtmek için &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; kullanıyoruz. Metot içinde ise gönderilen block’u kullanmak için &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call&lt;/code&gt; metotunu çağırıyoruz.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yield&lt;/code&gt; Ruby’de bir anahtar kelimedir ve kullanımı &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;block&lt;/code&gt; gibidir. Ancak aralarında ufak farklılıklar vardır. Bunlardan biri yield’i çağırırken call metotunu çağırmaya ihtiyacımız yoktur. Ayrıca yield, block’a göre performans olarak daha iyidir.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ender&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ender&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Parametre geçirmek yield için de geçerlidir. Aynı block’da olduğu gibi yield da parametre alabilir.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Örnek, Sıktı Bağdat’ın Ruby kitabından alınmıştır.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ruby’de block’ları birer nesne gibi kullanmak için &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Proc&lt;/code&gt; nesnesinden yararlanıyoruz. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;proc = Proc.new {}&lt;/code&gt; şeklinde çağırarak işlemlerimize başlıyoruz.&lt;/p&gt;

&lt;p&gt;Proc nesnesini çağırmak için block’larda olduğu gibi call metotununu kullanabiliriz.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; proc &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Proc.new &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; puts &lt;span class=&quot;s2&quot;&gt;&quot;Hello from Proc.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; proc.call
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Hello from Proc.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Lambda&lt;/code&gt; Proc sınıfından türeyen bir nesnedir. Lambda’yı oluşturmak için Ruby’de genellikle &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my_lambda = -&amp;gt; {}&lt;/code&gt; kullanılır. Bu kullanım Lambda nesnesi oluşturmamıza yarar.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; mult  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; lambda &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;|x,y| x &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; y &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; mult.call&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2,3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; 6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; wtp &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; -&amp;gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; puts &lt;span class=&quot;s2&quot;&gt;&quot;What&apos;s up?&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; wtp.call
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; What&lt;span class=&quot;s1&quot;&gt;&apos;s up?
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ruby’de Block, Yield, Proc ve Lambda kullanımları oldukça yaygın olduğunu unutmayalım. Özellikle kodları daha okunur ve kendini tekrar etmeyecek şekilde yazmak istediğimizde bu özellikleri kullanabiliriz.&lt;/p&gt;

&lt;p&gt;Sevgiler.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Debugging with Pry</title>
   <link href="http://localhost:4000/2016/05/15/debugging-with-pry.html"/>
   <updated>2016-05-15T00:00:00+03:00</updated>
   <id>http://localhost:4000/2016/05/15/debugging-with-pry</id>
   <content type="html">&lt;p&gt;Merhaba! Kod yazarken bir bir şeylerin yolunda gitmediği veya kod içinde neler olduğunu anlamak istediğimiz anlar oluyor. Bu gibi durumlarda debugging yapıyoruz.&lt;/p&gt;

&lt;p&gt;Ruby’de eğer IDE kullanıyorsunuz debugging yapmak bir nebze kolay olabiliyor. Ancak benim gibi Sublime vb bir text editör kullanıcısıysanız imdadımıza PRY yetişiyor.&lt;/p&gt;

&lt;p&gt;Pry nedir? Pry, aslında IRB yani Interactive Ruby Shell alternatif olarak çıkmış bir runtime developer console’dur. Kendisi bir RubyGem’i olup, bilgisayarınıza kurmanızla IRB’nin bazı zamanlarda yeterli olmadığı bir çok özelliği size sunar. Ancak bugünün konusu PRY’dan çok PRY ile nasıl debugging yapılır o olacak.&lt;/p&gt;

&lt;p&gt;Her şeyden önce PRY ile debugging yapabilmek için PRY RubyGem’nin makinemizinde kurulu olması gerekiyor.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;pry
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sonrasında ise artık kodumuzda hangi noktada durmasını istiyorsak oraya &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binding.pry&lt;/code&gt; komutu yazıyoruz. Örneğin,&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# person.rb&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;pry&apos;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;say_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pry&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;say_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ender&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;şeklinde bir Ruby kodu yazıyoruz ve konsoldan kodu çalıştırdığımızda ise&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; ruby person.rb
    4: def say_hello&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; 5:   binding.pry
    6:   puts &lt;span class=&quot;s2&quot;&gt;&quot;Hello #{name}&quot;&lt;/span&gt;
    7: end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;şeklinde bir çıktı alıyoruz. Bu anda artık &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; değişkenini çağırabilir ve içinde ne olduğunu görebiliriz.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1] pry&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#&amp;lt;Person&amp;gt;)&amp;gt; name&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ender&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sonrasında ise &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exit&lt;/code&gt; diyerek PRY’ı kapatıyoruz.&lt;/p&gt;

&lt;p&gt;Debugging yaparken kod içinde ileri gitmek, bir metotudun içine girmek ya da onu atlamak isteyebiliriz. PRY kendi hali ile buna cevap vermiyor. Ancak &lt;a href=&quot;https://github.com/nixme/pry-debugger&quot;&gt;pry-debugger&lt;/a&gt; gem’i ile bunu da halledebiliyoruz.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;pry-debugger
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yukardaki örnek üzerinden devam edecek olursak,&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;pry&apos;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;say_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pry&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Execution will stop here.&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Age: &quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Run &apos;step&apos; or &apos;next&apos; in the console to move here.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ask_age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ask_age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;How old are you? &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.capitalize&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;say_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ender&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next&lt;/code&gt; komudu ile kodun durduğu yer bir alt satıra inebiliriz. Pry-debugger gem’i bize &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;step&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;finish&lt;/code&gt; ve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;continue&lt;/code&gt; gibi fonksiyonlar da sağlamaktadır. Daha fazla bilgiye Github’daki Readme’den ulaşabilirsiniz.&lt;/p&gt;

&lt;p&gt;Sevgiler.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ruby Enumerable</title>
   <link href="http://localhost:4000/2016/05/06/ruby-enumerable.html"/>
   <updated>2016-05-06T00:00:00+03:00</updated>
   <id>http://localhost:4000/2016/05/06/ruby-enumerable</id>
   <content type="html">&lt;p&gt;Merhaba! Bugün Ruby’de hemen hemen her gün kullandığımız &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enumerable&lt;/code&gt; metotlarından bahsetmek istiyorum.&lt;/p&gt;

&lt;p&gt;Bu yazıda kullanılan örnekleri daha iyi anlayabilmek için öncelikle Ruby’de Array ve Hash kavramlarını biraz olsun bilmeniz gerekiyor.&lt;/p&gt;

&lt;p&gt;Ruby’de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enumerable&lt;/code&gt; modülüne ihtiyaç duymamızın nedeni colletion’lar üzerinde daha hızlı ve kolay çalışmalar yapabilmektir. Örneğin, bir collection içindeki bütün tek sayıları getirmek için döngüler ve if bloklarını kullanabiliriz. Ancak bunun yerine &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enumerable&lt;/code&gt; modülünde tanımlı metotlardan yardım alabiliyoruz.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enumerable&lt;/code&gt; ın metotlarını aşağıdaki gibi sıralayabiliriz.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Enumerable.instance_metots.sort
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;:all?, :any?, :chunk, :collect, :collect_concat, :count, :cycle, :detect, :drop, :drop_while, :each_cons, :each_entry, :each_slice, :each_with_index, :each_with_object, :entries, :find, :find_all, :find_index, :first, :flat_map, :grep, :group_by, :include?, :inject, :lazy, :map, :max, :max_by, :member?, :min, :min_by, :minmax, :minmax_by, :none?, :one?, :partition, :reduce, :reject, :reverse_each, :select, :slice_before, :sort, :sort_by, :take, :take_while, :to_a, :to_h, :zip]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bunların bazılarından bahsetmek gerekirse.&lt;/p&gt;

&lt;h2 id=&quot;each_with_index&quot;&gt;#each_with_index&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;each&lt;/code&gt; ile bir collection içindeki elemanları tek tek gezebiliriz.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1,2,3].each &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; |num| print &lt;span class=&quot;s2&quot;&gt;&quot;Number: #{num} &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Number: 1 Number: 2 Number: 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Bu elemanların tek tek index’lerine ulaşmak için ise &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;each_with_index&lt;/code&gt;i kullanabiliriz.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;9,8,7].each_with_index &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |e,i|
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;   puts &lt;span class=&quot;s2&quot;&gt;&quot;Index: #{i} Number: #{e}&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; end
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Index: 0 Number: 9
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Index: 1 Number: 8
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Index: 2 Number: 7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;map&quot;&gt;#map&lt;/h2&gt;
&lt;p&gt;Bir collection içindeki elemanlar üzerinde çalışmaklar yapmak istiyorsak &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; kullanmak en iyisi olacaktır.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;5,10,20].map&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;|e| puts e&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; 25
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; 100
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; 400
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;select&quot;&gt;#select&lt;/h2&gt;
&lt;p&gt;Bazı durumlarda bir collection içinden belli bir duruma bağlı olarak değeri ya da değerleri almak isteyebiliriz. Bu durumda &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select&lt;/code&gt; kullanırsak kodumuzu daha anlaşılır yazmış oluruz.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1..20&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.to_a.select&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;|n| n.odd?&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1, 3, 5, 7, 9, 11, 13, 15, 17, 19]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;1 ile 20 arasındaki tüm tek sayıları ekrana bastık.&lt;/p&gt;

&lt;h2 id=&quot;reject&quot;&gt;#reject&lt;/h2&gt;
&lt;p&gt;Seçmenin dışında bir collection’dan çıkarmak istediğimiz elemanlarımız da olabilir. Bu gibi durumlarda ise &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reject&lt;/code&gt; kullanabiliriz.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1..20&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.to_a.reject&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;|n| n.odd?&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yukarıda gördüğünüz gibi 1 ile 20 arasındaki tek sayıları çıkardım ve yeni array’im artık 1 ile 20 arasındaki çift sayılar oldu.&lt;/p&gt;

&lt;h2 id=&quot;any&quot;&gt;#any?&lt;/h2&gt;
&lt;p&gt;Bu metot bize duruma göre true ya da false bir boolean değer dönecektir. Eğer bir collection içinde bir duruma göre bir elemanın bulunup, bulumadığını kontrol etmek istiyorsak &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;any?&lt;/code&gt; kullanabiliriz.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1..20&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.to_a.any?&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;|n| n&amp;gt;20&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;group_by&quot;&gt;#group_by?&lt;/h2&gt;
&lt;p&gt;Sanırım kullanımı en karizmatik metot bu olabilir. Elimizdeki bir collection’ı istediğimiz bir duruma göre gruplamamıza yarıyor ve bize bir Hash dönüyor.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ali&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;mehmet&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;osman&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;ayşe&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;emine&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;.group_by&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&amp;amp;:length&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ali&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mehmet&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;osman&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;emine&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ayşe&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yukarıda da görüldüğü gibi içinde String’ler olan Array’imizi String’lerin uzunluklarına göre grupladık.&lt;/p&gt;

&lt;h2 id=&quot;sort&quot;&gt;#sort&lt;/h2&gt;
&lt;p&gt;Adı üstünde :)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ali&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;mehmet&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;osman&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;ayşe&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;emine&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;.group_by&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&amp;amp;:length&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.sort
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt;3, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ali&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;4, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ayşe&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;5, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;osman&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;emine&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;6, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mehmet&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Tabiki bütün kullanımlar bu kadar değil. Daha fazlası da var. Belki başka bir yazıda daha detaylı olarak diğer kullanımlardan örnekler verebilirim.&lt;/p&gt;

&lt;p&gt;Sevgiler.&lt;/p&gt;
</content>
 </entry>
 

</feed>
