#!/bin/bash
set -e

### BEGIN INIT INFO
# Provides:           srcclr
# Required-Start:     
# Required-Stop:      
# Should-Start:
# Should-Stop:
# Default-Start:      2 3 4 5
# Default-Stop:       0 1 6
# Short-Description:  srcclr deamon that scans source code for vulns
# Description:
### END INIT INFO

BASE=$(basename $0)
SRCCLR=$(which srcclr)

# This pid file is managed by start-stop-daemon
SRCCLR_PIDFILE=/var/run/$BASE.pid
SRCCLR_DESC="srcclr server"
SRCCLR_LOG=/var/log/srcclr.log

# Get lsb functions
. /lib/lsb/init-functions

if [ ! -x $SRCCLR ]; then
    log_failure_msg "$SRCCLR not present or not executable"
    exit 1
fi

fail_unless_root() {
    if [ "$(id -u)" != '0' ]; then
        log_failure_msg "\"$SRCCLR_DESC\" must be started as root, but will run as the user srcclr."
        exit 1
    fi
}

case "$1" in
    start)
        fail_unless_root

        log_begin_msg "Starting $SRCCLR_DESC: $BASE"
        # the srcclr is started with the srcclr login environment
        start-stop-daemon --start \
            --pidfile "$SRCCLR_PIDFILE" \
            --make-pidfile \
            --background \
            --exec /bin/su \
            -- srcclr --login -c $SRCCLR server \
              >> "$SRCCLR_LOG" 2>&1
        log_end_msg $?
        ;;

    stop)
        fail_unless_root
        log_begin_msg "Stopping $SRCCLR_DESC: $BASE"
        start-stop-daemon --stop --pidfile "$SRCCLR_PIDFILE"
        log_end_msg $?
        ;;

    restart)
        fail_unless_root
        SRCCLR_PID=`cat "$SRCCLR_PIDFILE" 2>/dev/null`
        [ -n "${SRCCLR_PID}" ] \
            && ps -p ${SRCCLR_PID} > /dev/null 2>&1 \
            && $0 stop
        $0 start
        ;;

    force-reload)
        fail_unless_root
        $0 restart
        ;;

    status)
        status_of_proc -p "$SRCCLR_PIDFILE" "$SRCCLR" "$SRCCLR_DESC"
        ;;

    *)
        echo "Usage: $0 {start|stop|restart|status}"
        exit 1
        ;;
esac
