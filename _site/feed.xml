<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-12-29T13:14:25+03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Ender Ahmet Yurt</title><subtitle>Software Engineer</subtitle><author><name>Ender Ahmet Yurt</name><email>enderyurt@gmail.com</email></author><entry><title type="html">2023, Kazanımların ve Kayıpların Yılı</title><link href="http://localhost:4000/2023/12/26/2023-kazan%C4%B1mlar%C4%B1n-ve-kay%C4%B1plar%C4%B1n-y%C4%B1l%C4%B1.html" rel="alternate" type="text/html" title="2023, Kazanımların ve Kayıpların Yılı" /><published>2023-12-26T16:12:00+03:00</published><updated>2023-12-26T16:12:00+03:00</updated><id>http://localhost:4000/2023/12/26/2023-kazan%C4%B1mlar%C4%B1n-ve-kay%C4%B1plar%C4%B1n-y%C4%B1l%C4%B1</id><content type="html" xml:base="http://localhost:4000/2023/12/26/2023-kazan%C4%B1mlar%C4%B1n-ve-kay%C4%B1plar%C4%B1n-y%C4%B1l%C4%B1.html"><![CDATA[<p>Merhaba, Kocaman bir yıl daha bitti ve bu koca yılda neler yapıldı bakma, ifade verme zamanı geldi.</p>

<p>Son birkaç senedir yaptığım geleneği bozmak istemedim ve oturdum klavye başına. Önceki yıllardaki yazılarımı okumadıysan aşağıdan ulaşabilirsin.</p>

<ul>
  <li><a href="https://medium.com/@eayurt/2021-ve-belki-biraz-%C3%B6ncesi-f3ec22b6a9be">2021 ve Belki Biraz Öncesi</a></li>
  <li><a href="https://medium.com/@eayurt/ah-be-2022-93811054c20f">Ah be 2022 👋</a></li>
</ul>

<p>Bu sene yola günlük yazma alışkanlığı ile çıktım ne yazık ki pek sürdürebilir olmadı. Gene fotoğraflara bakarak koca bir yılın nasıl geçtiğini hatırlamaya çalıştım. Aslında bu yıl hayatımda acı ve tatlısıyla birçok şey oldu ve birçok öğrenim edindim, yenilendim. Fotoğraflara bakmak, yıl içinde yaşadıklarımı hatırlamamda bana yardımcı oldu.</p>

<p>Ocak ayı direk iş seyahati ile başladığından biraz seyahatlerden bahsetmek istiyorum. Bu sene Polonya ve İtalya’yı ziyaret etme şansım oldu. Bir de Almanya seyahatim olacaktı ama iptal etmek durumunda kaldık. Bu sene Schengen vizemin de yeterli sürede olması elimi rahatlattı diyebilirim. Ancak döviz kurlarındaki güzel artışlar, biraz yavaş ol genç de demedi değil. Bütün bu Avrupa seyahatlerim şirket buluşmaları ya da birlikte çalışma buluşmaları yani takım buluşmaları ile oldu. Uzaktan çalışmak her ne kadar güzel olsa da sosyal olarak eksik hissettiğimiz için Teamtailor, çalışanlarını belirli zamanlarda bir araya getirmek için elinden geleni yapıyor. Bu konu ile alakalı bir yazıyı da bu sene yazdım.</p>

<p>Her sene İsveç’e gitmesem olmuyor (2. senesi 🤪) Bu sene Göteborg’a tekrar gitme fırsatım oldu ve bu kez daha fazla kaldım. Hem eski arkadaşları hem de iş arkadaşlarını görmek iyi geldi diyebilirim. Yurt dışından ziyade yurt içinde özellikle çevre il ve ilçelerde gezme şansını bu sene daha fazla buldum. Aslında bunun en büyük sebebi, bu sene hayatımdaki en büyük değişimlerden birini yaşamış olmamdan kaynaklanıyor.</p>

<p>Pandeminden biraz önce yaşamak istediğim olaylar başıma geldikten sonra arkasından pandemi gelmesi ile bir durgunluk ve yalnızlık ile iyice içe çekilmeye başlamıştım. Bu durumu bir fırsat bilip, kendimi dinlenme, dinlemeye başladım. Geçen sene itibari ile hayata daha farklı bakmaya ve yaşamaya başlayınca, hayatta bana en güzel hediyesi verdi. Bu hediyenin kıymetini ve varlığını bilerek özellikle bu yılın ikinci yarısını geçirmeye başladım. 2023’ün benim için ikinci yarısı daha tatlı ve aşk kokulu geçti diyebilirim. 🌸</p>

<p>Senenin ilk yarısında kendimi spora özellikle koşuya adamıştım. Seyahatlerimin veya hayatımdaki başka gelişmelerin benim yapacaklarıma engel olmadı. Neler yapmak istiyorsam yapmaya devam ettim. Hatta Youtube’da koşu ile alakalı deneyimlerimi anlattığım videolar çekmeye başladım. Ancak Kaş seyahatim sonrası (evet bu sene de Kaş’a gittim) hastalanmam ve hastalığımın 1 haftaya yakın sürmesi ile spora eskisi gibi yapmaya devam edemedim. Spor ile alakalı her şey olduğu yerde kaldı. Bu satırları yazarken hala eski spor tempom yok hatta hayatımda hiç spor yok. Sanırım bazen durmak ve öylece bakmak bana iyi geliyor. Bir takım planlarım 2024 için var ama ne kadar başarılı olur bilemiyorum. Umarım bu sefer ilk tökezlemede pes etmem.</p>

<p>Bu sene ülkemizde hiç istemeyeceğimiz olaylar yaşadık. 6 Şubatta sabaha karşı merkez üssü Kahramanmaraş olan ve büyüklükleri 7.8 ve 7.5 olan iki deprem meydana geldi. Türkiye’nin birçok ilinden hissedilen bu depremler sonrasındaki tablo tüm ülkeyi yasa boğdu ve insanlar ellerinden geldiğince özellikle merkez üssüne yakın bölgelere yardım etmeye çalıştı. Bu tramvayı ülkece hala atlabilmiş değiliz. Koca koca şehirler yerle bir oldu ve sorumluluları hala ne yapıyor kimse bilmiyor (Türkiye gerçeği). Bu konuda diyecek o kadar çok şey var ama ne zaman yazmak istesem elim ayağım titremeye başlıyor. Umarım bizim yetki verdiğimiz insanlar bir gün biraz da olsun halkı düşünürler ve ellerini taşın altına koyar, bu tablonun bir daha yaşanmaması için çalışmaları ve önemleri daha etik ve hızlı bir şekilde hayata geçirirler.</p>

<p>Bu sene içerisinde İsrail’in Filistin’e yaptığı saldırılar ve dünyanın bu olaylara karşı aldığı tavrı gördük. Hiçbir açıklaması olmayan ve tamamen insanlık dışı, sistematik bir saldırıyı izledik Filistin’e karşı. Dünya olarak bu savaşa her ne kadar durdurun desek de sonu gelmeyen bir hal almaya başladı. Son zamanlardaki politik gelişmeler ile belki biraz azaldı diye düşünebiliriz ama savaşın ne kadar da kötü bir şey olduğunu ve çözüm olmadığı tekrar ne yazık ki görmüş olduk. Umarım 2024 yılında benzer saldırılar görmeyiz ve masum insanlar hayatlarını kaybetmezler.</p>

<p>Hayat bu sene bana ne kadar doğru tercihler yaptığımı bir kez daha gösterdi. Pandemi dolayısıyla Ünye’ye memleketime dönmüş ve burada yaşama kararı almıştım. Bu kararın ne kadar isabetli olduğunu hayatımdaki ve kendi ruhumdaki değişimden, yakınımdakilerden ziyade beni bir şekilde takip edenler bile anlayabiliyordu. Bu düşüncelerini benimle paylaştıkları için tekrar onlara teşekkür ediyorum. Bazen ne kadar iyi olsak da fark edemiyor ve daha iyisi olmak için daha fazla çabalarken istemeden de olsa geri gidebiliyoruz. Mayıs ayı sonlarına doğru bir gecede dedemizi kaybettik. Bütün aile olarak bu kadar hızlı gerçekleşen bu ölümü kabullenmek ve normale adapte olmak zor oldu diyebilirim. Dedemin vefatı bana baba-oğul ilişkilerine, bireysel sorumluluklara daha farklı bakma ve babamla olan aramızdaki iletişimi daha farklı yorumlamama vesile oldu. Hayatın hep olduğu gibi gitmeyeceği belki çok geç bir yaşımda öğrendim ancak şükür ki bu gibi durumlara nasıl bakabileceğimi en azından biraz da olsa öncesinde biliyordum.</p>

<p>Pandemiden sonra tekrar saç uzatmaya karar vermiştim. Tekrar diyorum çünkü bu girişimimi üniversite okurken de yapmıştım ve tabiki pek de verimli olamamıştı. Sonrasında saçları uzun süre kısa kullandım ve tekrar uzatmaya karar verdim. Bu sefer pek uzamamıştı ama bu sene yaz aylarına doğru eski tarzıma sert bir dönüş yaptım bir günde. Berberde herkes şaşırmıştı. Bense çok mutluydum. Eski bir dost ile yeniden karşılaşmak gibiydi. Bu eski-yeni imajim herkes tarafından beğenildi. Beğenilmek çok güzel tabiki.</p>

<p>Teamtailor’daki ikinci senem bu sonbahar itibari ile bitti. Güzel bir iki sene geçirdim diyebilirim. Çok fazlaca şey öğrendim ve öğrenmeye de devam ediyorum. TT tarafında işler güzel gidiyor. Yazın takımla ve yöneticim ile tekrar buluşup, konuştuktan sonra şirket içinde yapmak istediklerimi ve rol haritamı belirledik. Yöneticimin beni dinlemesi ve takımım ile uyum ile çalışıp, güzel işler çıkarmak çok hoşuma gidiyor.</p>

<p>Hatırı sayılır bir süredir bilerek ya da bilmeyerek bir şekilde birikim yaptıktan sonra 10 senedir kullanmakta olduğum otomobilimi biraz da babamın gazı ile değiştirme kararını yıl başında alıp, Nisan ayı gibi yeni arabama kavuştum. Kendisi ile şu an baya iyiyiz. Severek ve isteyerek, kendi paramla aldığım bir araç oldu kendisi. Eski otomobilimin bir sorunu yoktu ama uzun süre aynı araca binmek ilerde büyük sorunlar getirebilirdi. Ekonomiyi de düşününce o dönemlerde otomobil almak bu zamana göre iyi bir yatırım oldu diyebilirim.</p>

<p>Bu sene deneyimlemek istediğim iki etkinliği hayata geçirdim. Neden bilmiyorum bu yaşıma kadar bir opera ya da bale izlemedim. Muhtemelen zamanım olmamıştır. Opera için aynı şeyi söyleyemem ama baleye bayıldım. Hatta geçenlerde ikinci kez bir oyuna daha gittik. Tabi bütün bunların olmasında hayatıma giren insanın çok büyük bir payı var. Kendisi zaten sahne sanatlarının izleyicisi ve takipcisi olduğu için beni de bale ve opera ile tanıştırdı. Bu sene hayatımında beni ruhen besleyen birinin olmasının ne kadar önemli olduğunu fark ettim.</p>

<p>Bu sene Ruby Türkiye’ye ve Yakut’a pek vakit ayıramadım. Oturup nedenlerini düşününce bulduğum sebepler elbette var ancak sebep düşükmektese topluluğu yeniden ayağa kaldırmak için önce bireysel sonra da toplulukla beraber bir harekete girişmek gerekiyor gibi. Senenin sonuna doğru komunitelerde bulunmak ve konuşma yapmak adına birkaç girişimde bulunmaya başladım. Bunlar beni çok mutlu ediyor. Daha iyilerini yapabilmek adına heyecan duyuyorum. Samsun Developers adında Samsun’da yaşayan ve yazılım ile ilgilenenler ile ayda bir buluşmaya, tecrübelerimizi paylaşmaya başladık. Burası yaklaşık 3–4 aydır aktif ve güzel gidiyor. Fiziksel olarak yazılımcı arkadaşlar ile bir araya gelmek çok keyifli. Ayrıca ufaktan konuşmalar vermeye de başladım. Uzun zamandır online da olsa konuşma yapmıyordum ve Aralık ayında yaptığım küçük bir konuşma ile tekrar döndüm diyebilirim.</p>

<p>Bir hayalle başlayıp, ben bunu uçururum dediğim projem Podiscover’ın ipini yakınlarda çektim. Bu sene kendisi için süper vakit ayırdığımı söyleyemem ancak ikinci senesini yakında dolduracak bir projeyi tam kafamdaki hale getirememek beni içten içe yormaya başlamıştı. Daha da fazla uzatmamak adına Podiscover projemi kapadım. Artık o tarafa bakmama ve olursa yeni projelere bakma kararı aldım. Bu iki senede baya birşey öğredim ve yeni insanlar ile tanıştım. En azından neyin nasıl yapılamayacağını deneyerek görmüş ve deneyimlemiş oldum.</p>

<p>Uzun zamandır severek yaptığım Üretim Bandı:Teknik podcast’i bu sene de çok güzel bölümler ile dinleyicileri ile buluştu. 30’a yakın bölüm çektim ve bunların büyük bir kısmı sponsorlu bölümlerdi. Podcast yaparak ilk kez para kazanmış olmak, yaptığımız şeyin ne kadar doğru ve kaliteli olduğunu göstermiş oldu. Dinleyicilerden gelen güzel geri bildirimler ve podcast yaparken birçok şey öğrenip, yeni insanlarla tanışıyor olmak podcast yapma hevesimi daha da arttırdı.</p>

<p>2023’ü yazmaya başlamadan önce, hayatımda ne gibi büyük değişimler olduğu bir kağıda minik notlar alırken AŞK ve KAYIP kelimeleri yazdığımı fark ettim. Bu iki kelimeyi yan yana bi şekilde getirmiş ve büyük harflerle not almıştım. Geçen senenin kelimesi hareketti. Bu senenin kelimesi olmayı hak eden çok fazla kelime olduğunu düşünüyorum. Ancak bunları birleştirip bir kelime yaparsam ben yenilenme diyebilirim. Kazanımlar da kayıplar da bir yenilenme, yeni bir başlangıç olarak görülmeli diye düşünüyorum. Hayat bir doğrusalda her türlü akıyor. Bizler de ona ayak uydurup, kendi rollerimizi belirlemeli ve hayata devam etmeliyiz diye düşünüyorum. Hepinize çok ama çok güzel bir 2024 yılı diliyorum.
Sevgiler ❤️</p>]]></content><author><name>Ender Ahmet Yurt</name><email>enderyurt@gmail.com</email></author><category term="personal" /><category term="recap" /><summary type="html"><![CDATA[Merhaba, Kocaman bir yıl daha bitti ve bu koca yılda neler yapıldı bakma, ifade verme zamanı geldi.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/public/images/2023bye.jpg" /><media:content medium="image" url="http://localhost:4000/public/images/2023bye.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Jekyll’da Tag Ekleme</title><link href="http://localhost:4000/2023/11/14/jekyll-da-tag-ekleme.html" rel="alternate" type="text/html" title="Jekyll’da Tag Ekleme" /><published>2023-11-14T18:57:00+03:00</published><updated>2023-11-14T18:57:00+03:00</updated><id>http://localhost:4000/2023/11/14/jekyll-da-tag-ekleme</id><content type="html" xml:base="http://localhost:4000/2023/11/14/jekyll-da-tag-ekleme.html"><![CDATA[<p>Merhaba 🙋 Bir süredir yazı yazamıyordum. Daha doğrusu Medium tarafına yazsam bile bu siteye pek yazı yazmıyordum. Bu siteyi sadece teknik yazılar için kullanmaya karar verdiğim için buraya pek yazı yazamadım. O da benim eksikliğim olsun.</p>

<p>Geçenlerde düşünürken iki tarafta yazmak yerine bir yerde yazılarımı yazayım ve bu yazdığım yer de benim kontrolümde olsun dedim. Böylelikle bu site üzerinde yazılarıma ister hayata dair olsun, ister teknik olsun devam edeyim dedim. Yazıları bir yerde yayımlama kararı verdikten sonra yazılara tag ya da kategory ekleme fikri aklıma geldi. Diğer türlü yazılar ileride karışmaya başlayacak ve okuması, sonradan bulması zor bir hal alacaktı. Ancak kullandığım Jeykll teması tag özelliğini desteklemiyordu (bunu daha önceden biliyordum.) Yeni tema ile uğraşmak istemediğim için var olan temaya nasıl tag özelliği eklerim diye baktım.</p>

<p>Internette bir temaya nasıl tag ya da kategori özelliğinin ekleneceği ile alakalı bolca yazı var. Hatta bazı kütüphaneler de var bu işi yapan. Benim araştırmalarım sonucunda Long Qian’ın <a href="https://longqian.me/2017/02/09/github-jekyll-tag/">Jekyll Tags on Github Pages</a> başlıklı yazısı hoşuma gitti. Yazıda geçen adımları kendi blog’um için uyguladım ve tag sistemi istediğim şekilde çalışıyor durumuna geldi. Siteyi deploy ettikten sonra yazının orjinalini alıp, biraz da kendi tecrübelerimi ekleyerek Türkçe bir içerik oluşturayım dedim.</p>

<p>Eğer herhangi bir Jeykll blog kullanıyor ve bunu Github Pages’da yayınlıyorsanız tag özelliğini blog’unuza eklemek için adım adım yapılacakları anlatayım.</p>

<h2 id="1-postlara-tag-alanı-eklemek">1. Post’lara tag alanı eklemek</h2>
<p>Eğer bir post’u <code class="language-plaintext highlighter-rouge">jekyll post "Hello World"</code> komudu ile oluşturursanız size.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>layout: post
title: Hello World
date: 2023-11-14 18:57 +0300
</code></pre></div></div>

<p>şeklinde bir Markdown dosyası oluşturacaktır. Buraya <code class="language-plaintext highlighter-rouge">tags</code> alanını ekleyerek şu şekilde günceleyebilirsiniz.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>layout: post
title: Hello World
date: 2023-11-14 18:57 +0300
tags: [foo, bar]
</code></pre></div></div>

<p>Tag’leri virgül ile ayırıyoruz. Eğer bir tag bir kelimeden fazlaysa, onu da <code class="language-plaintext highlighter-rouge">-</code> ile kelimeleri bağlıyoruz. Örneğin, <code class="language-plaintext highlighter-rouge">ruby-on-rails</code></p>

<h2 id="2-tagleri-bir-postta-toparlamak">2. Tag’leri bir Post’ta toparlamak</h2>
<p>Tag’leri post içerinde toparlamak için <code class="language-plaintext highlighter-rouge">_site</code> klasörü altında <code class="language-plaintext highlighter-rouge">tag</code> klasörüne ihtiyacımız var. Bunun da oluşturabilmesi için <code class="language-plaintext highlighter-rouge">_includes</code> klasörü altında <code class="language-plaintext highlighter-rouge">collecttags.html</code> adında bir dosya açıyor ve
içine alttaki kod bloğunu yapıştırıyoruz.</p>

<div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">rawtags</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">""</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span><span class="nv">post</span><span class="w"> </span><span class="nt">in</span><span class="w"> </span><span class="nv">site.posts</span><span class="w"> </span><span class="p">%}</span>
  <span class="p">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">ttags</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">post</span><span class="p">.</span><span class="nv">tags</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">join</span><span class="p">:</span><span class="s1">'|'</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">append</span><span class="p">:</span><span class="s1">'|'</span><span class="w"> </span><span class="p">%}</span>
  <span class="p">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">rawtags</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">rawtags</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">append</span><span class="p">:</span><span class="nv">ttags</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">rawtags</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">rawtags</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">split</span><span class="p">:</span><span class="s1">'|'</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">sort</span><span class="w"> </span><span class="p">%}</span>

<span class="p">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">site</span><span class="p">.</span><span class="nv">tags</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">""</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span><span class="nv">tag</span><span class="w"> </span><span class="nt">in</span><span class="w"> </span><span class="nv">rawtags</span><span class="w"> </span><span class="p">%}</span>
  <span class="p">{%</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="nv">tag</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s2">""</span><span class="w"> </span><span class="p">%}</span>
    <span class="p">{%</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="nv">tags</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">""</span><span class="w"> </span><span class="p">%}</span>
      <span class="p">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">tags</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">tag</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">split</span><span class="p">:</span><span class="s1">'|'</span><span class="w"> </span><span class="p">%}</span>
    <span class="p">{%</span><span class="w"> </span><span class="kr">endif</span><span class="w"> </span><span class="p">%}</span>
    <span class="p">{%</span><span class="w"> </span><span class="kr">unless</span><span class="w"> </span><span class="nv">tags</span><span class="w"> </span><span class="ow">contains</span><span class="w"> </span><span class="nv">tag</span><span class="w"> </span><span class="p">%}</span>
      <span class="p">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">tags</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">tags</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">join</span><span class="p">:</span><span class="s1">'|'</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">append</span><span class="p">:</span><span class="s1">'|'</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">append</span><span class="p">:</span><span class="nv">tag</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">split</span><span class="p">:</span><span class="s1">'|'</span><span class="w"> </span><span class="p">%}</span>
    <span class="p">{%</span><span class="w"> </span><span class="kr">endunless</span><span class="w"> </span><span class="p">%}</span>
  <span class="p">{%</span><span class="w"> </span><span class="kr">endif</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">%}</span>
</code></pre></div></div>

<h2 id="3-tagleri-oluşturmak">3. Tag’leri oluşturmak</h2>
<p><code class="language-plaintext highlighter-rouge">collecttags.html</code> dosyasındaki kodu çalıştırabilmek için bir yerlerde çağırmamız lazım. <code class="language-plaintext highlighter-rouge">head.html</code> içinde bunu yapmak ve herhangi sayfa yüklendiğinde halletmek iyi gibi duruyor. O yüzden sizler de
kendi <code class="language-plaintext highlighter-rouge">_includes/head.html</code> dosyanız içine aşağıdaki kodu koyabilirisiniz.</p>

<div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{%</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="nv">site</span><span class="p">.</span><span class="nv">tags</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s2">""</span><span class="w"> </span><span class="p">%}</span>
  <span class="p">{%</span><span class="w"> </span><span class="nt">include</span><span class="w"> </span>collecttags.html<span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="kr">endif</span><span class="w"> </span><span class="p">%}</span>
</code></pre></div></div>

<h2 id="4-bir-postta-tagleri-göstermek">4. Bir Post’ta Tag’leri göstermek</h2>
<p>Post içinde tag’leri görüntüleyebilmek için <code class="language-plaintext highlighter-rouge">_layouts/post</code> içine aşağıdaki kodu koyuyoruz.</p>

<figure class="highlight highlight-left"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;span&gt;</span>[
  {% for tag in page.tags %}
    {% capture tag_name %}{{ tag }}{% endcapture %}
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/tag/{{ tag_name }}"</span><span class="nt">&gt;&lt;code</span> <span class="na">class=</span><span class="s">"highligher-rouge"</span><span class="nt">&gt;&lt;nobr&gt;</span>{{ tag_name }}<span class="nt">&lt;/nobr&gt;&lt;/code&gt;</span><span class="ni">&amp;nbsp;</span><span class="nt">&lt;/a&gt;</span>
  {% endfor %}
]<span class="nt">&lt;/span&gt;</span></code></pre></figure>

<p>Burada istediğiniz tasarım değişikliklerini yapabilirsiniz.</p>

<h2 id="5-tagpage-oluşturmak">5. TagPage oluşturmak</h2>
<p>Tag’lerin kendi sayfaları olması için <code class="language-plaintext highlighter-rouge">_layouts/tagpage.html</code> oluşturuyoruz ve alttaki kodu içine yapıştırıyoruz.</p>

<figure class="highlight highlight-left"><pre><code class="language-html" data-lang="html">---
layout: default
---
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"post"</span><span class="nt">&gt;</span>
<span class="nt">&lt;h1&gt;</span>Tag: {{ page.tag }}<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;ul&gt;</span>
{% for post in site.tags[page.tag] %}
  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">"{{ post.url }}"</span><span class="nt">&gt;</span>{{ post.title }}<span class="nt">&lt;/a&gt;</span> ({{ post.date | date_to_string }})<span class="nt">&lt;br&gt;</span>
    {{ post.description }}
  <span class="nt">&lt;/li&gt;</span>
{% endfor %}
<span class="nt">&lt;/ul&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;hr&gt;</span></code></pre></figure>

<p>Buradaki amaç tamamen bir sayfa şeklinde Tag’leri ve ilgili tag’e ait post’ları göstermek.</p>

<p>Her tag’in kendi sayfası olması işini manuel de yapabiliriz ancak ben otomatik olması istediğim için <a href="https://github.com/qian256/qian256.github.io/blob/master/tag_generator.py">tag generator</a> adlı script’i
ana dosya dizinine ekledim. Burada unutmamız gereken bu script’i yeni bir post ekledikten sonra deploy çıkmadan önce çalıştırmak.</p>

<h2 id="6-tagleri-bir-arada-göstermek">6. Tag’leri bir arada göstermek</h2>
<p>Bu adımı yapmak zorunda değilsiniz ancak ben bütün tag’leri bir arada göstermek istediğim için <code class="language-plaintext highlighter-rouge">_includes/archive.html</code> dosyası içine</p>

<figure class="highlight highlight-left"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;h2&gt;</span>Archive<span class="nt">&lt;/h2&gt;</span>
{% capture temptags %}
  {% for tag in site.tags %}
    {{ tag[1].size | plus: 1000 }}#{{ tag[0] }}#{{ tag[1].size }}
  {% endfor %}
{% endcapture %}
{% assign sortedtemptags = temptags | split:' ' | sort | reverse %}
{% for temptag in sortedtemptags %}
  {% assign tagitems = temptag | split: '#' %}
  {% capture tagname %}{{ tagitems[1] }}{% endcapture %}
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/tag/{{ tagname }}"</span><span class="nt">&gt;&lt;code</span> <span class="na">class=</span><span class="s">"highligher-rouge"</span><span class="nt">&gt;&lt;nobr&gt;</span>{{ tagname }}<span class="nt">&lt;/nobr&gt;&lt;/code&gt;&lt;/a&gt;</span>
{% endfor %}</code></pre></figure>

<p>kodlarını ekledim ve bu dosyayı da istediğim yerde</p>

<p><code class="language-plaintext highlighter-rouge">{% include archive.html %}</code></p>

<p>şeklinde çağırdım.</p>

<h2 id="7-sonuç">7. Sonuç</h2>

<p>Evet artık sadece yapılması gerek kodu Github’a göndermek ve production ortamında görmek kalıyor.</p>

<p>Bu yazıya ilham olduğu için Long Qian’a teşekkür ediyorum. Thank you Long Qian 🙏</p>

<p>Sevgiler ❤️</p>

<p><small><b>Referanslar:</b> <a href="https://longqian.me/2017/02/09/github-jekyll-tag">https://longqian.me/2017/02/09/github-jekyll-tag</a></small></p>]]></content><author><name>Ender Ahmet Yurt</name><email>enderyurt@gmail.com</email></author><category term="jekyll" /><category term="github-pages" /><summary type="html"><![CDATA[Merhaba 🙋 Bir süredir yazı yazamıyordum. Daha doğrusu Medium tarafına yazsam bile bu siteye pek yazı yazmıyordum. Bu siteyi sadece teknik yazılar için kullanmaya karar verdiğim için buraya pek yazı yazamadım. O da benim eksikliğim olsun.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/public/images/tags.jpg" /><media:content medium="image" url="http://localhost:4000/public/images/tags.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">2022’de Ruby</title><link href="http://localhost:4000/2023/02/02/2022-de-ruby.html" rel="alternate" type="text/html" title="2022’de Ruby" /><published>2023-02-02T20:14:00+03:00</published><updated>2023-02-02T20:14:00+03:00</updated><id>http://localhost:4000/2023/02/02/2022-de-ruby</id><content type="html" xml:base="http://localhost:4000/2023/02/02/2022-de-ruby.html"><![CDATA[<p>Merhaba 🙋 2021’in Ruby için nasıl geçtiğine dair bir yazı yazmıştım. Şimdi sıra 2022’ye geldi. Bakalım 2022 Ruby için nasıl geçti.</p>

<h2 id="ruby-32">Ruby 3.2</h2>

<p>Bu sefer biraz tersten başlamak istiyorum. 24 Aralık’ta duyurulan <strong>Ruby 3.2</strong> versiyonundan başlayacağım. Her sene Christmas’ta Ruby’nin yeni bir versiyonun çıkmasına zaten topluluktakiler alışık. Geçen sene Ruby 3.1’in release olması ile Ruby’de artık değişim başlıyor demiştik ve bu seneki yapılan çalışmalar ve sonunda Ruby 3.2’nin duyurulması da Ruby’nin o durağan günlerden çıkıp artık konuşulan bir programlama dili olacağını gösterir nitelikte. Özellikle performans tarafında yapılan geliştirmeler ve daha fazla developer friendly bir dil olmaya doğru gitmesi Ruby’nin geleceğinin parlak olacağını bize bu sene göstermeye başladı. Shopify CEO’su Tobb Lutke’nin bu <a href="https://twitter.com/tobi/status/1605656985185226753">Tweet’i</a> zaten Ruby’nin bu seneki gelişimini açıkça gösteriyor. Ayrıca Ruby 3.2 ile artık deneysel olmaktan çıkan YJIT özelliği da bu performansın altında yatan neden diyebiliriz. Topluluktan da tanıdığımız Ufuk Kayserilioğlu’nun <a href="https://twitter.com/paracycle/status/1605706228734238722">Tweet flood’u</a> konuyu daha detaylı anlatıyor. Daha fazla teknik detayları burada tek tek sıralamaktansa sizleri her cumartesi akşam yaptığımız Yakut yayınlarına davet ediyorum. Bütün sene boyunca yakından ve detaylı olarak Ruby’deki gelişmeleri konuştuk ve konuşmaya da devam edeceğiz gibi duruyor.</p>

<h2 id="ruby-on-rails-7-ile-geçen-bir-sene">Ruby on Rails 7 ile geçen bir sene</h2>

<p>2021’nin son günlerine doğru Ruby on Rails 7.0.0’ın çıkması ile çok heyecanlandığımı söyleyebilirim. Uzun bir zaman sonra yeni bir RoR versiyonuna heyecanlanmamıştım. Bütün sene boyunca şahsen tüm özelliklerini kullanamadım ama side projem <a href="https://www.podiscover.me">Podiscover</a> sayesinde gerçek ortamda çalışan büyük projede RoR’un bu en taze versiyonunu kullanma ve deneyimleme şansı buldum (buluyorum).</p>

<p>Ruby ile web geliştirme tarafında bizi en çok üzen haberlerden biri bu sene Heroku’nun free dyno’ları kapatması <a href="https://help.heroku.com/RSBRUH58/removal-of-heroku-free-product-plans-faq">haberi</a> oldu. RoR’nun en harika özelliklerinden biri olan pragmatik bir şekilde geliştirme yapmak ve yazılan web uygulamasının çok hızlı ve basit bir şekilde production ortamına atılmasıydı. Heroku bu anlamda birçok insana bedava olarak yardımcı olmuştur. Bu karar ile artık RoR uygulamalarının kolay yoldan nasıl deploy edileceğini konuşulmaya başlamışken ki zaten alternatifler hep vardı DHH, <strong><a href="https://github.com/rails/docked">Docked Rails CLI’ı</a></strong> duyurdu. Bu özellik sayesinde artık RoR uygulamaları kolayca dockerize edilebilir oldu ve en azından başlangıç aşamasında bu engeli de atlamış olduk. Senenin sonuna doğru gelen bu özellik biraz olsun yüzleri güldürdü diyebilirim.</p>

<p>Bu senenin RoR için en büyük olaylarından biri de <strong>Webpacker</strong>’ın 5 sene sonra tamamen kaldırılması oldu. RoR 7 ile gelen yeni JS yaklaşımı ve diğer frontend geliştirme özellikleri zaten bunun sinyalini vermişti ve bu sene <a href="https://github.com/rails/webpacker#webpacker-has-been-retired-">Webpacker’a veda ettik</a>.</p>

<p>Ruby on Rails her ne kadar DHH’in trademark’ı olsa da topluluk RoR özelindeki konularda konuşmaya ve karar vermeye açık. Bu vesile ile RoR topluluğu bu sene kendi <a href="https://rubyonrails.org/2022/6/13/rails-discord-server-is-now-open-to-the-public">Discord kanalı herkese açtı</a>. Bu sayede artık RoR geliştiricileri arasında geçen konuşmaları okuyabilme ve oradaki konulara dahil olabilme şansı sağlandı. Bunun dışında bu sene <strong><a href="https://rubyonrails.org/foundation">The Rails Foundation</a></strong> adında kar amacı gütmeyen bir organizasyon kuruldu. RoR kullanan büyük şirketler bu derneğe bağış yaparak, Ruby on Rails’ın geliştirilmesine bir de bu yoldan katkı sağlamış oldular.</p>

<h2 id="diğer-gelişmeler">Diğer gelişmeler</h2>

<p>2022’de radarlara takılan birkaç gelişmeden de bahsedicek olursak; Bunlardan ilki <strong><a href="https://hanamirb.org/blog/2022/11/22/announcing-hanami-200/">Hanami</a></strong>’nin sonunda ikinci versiyonun çıkmış olması diyebiliriz. Bizim kanımıza göre Hanami biraz Ruby on Rails olma yolunda ilerlese de gene de Ruby ekosistemine farklılıklar getirdiğini söylemek mümkün.</p>

<p>Diğer gelişmeler arasında <strong><a href="https://www.mikeperham.com/2022/10/27/introducing-sidekiq-7.0/">Sidekiq 7</a></strong>‘nin release olmasını koymazsak olmaz gibi sanki. Ruby ekosisteminde en çok tercih edilen background job yönetme aracı olan Sidekiq, 2022’de sadece performans anlamında değil metrikleri gösterme anlamında da yenilere giderek 7. sürümünü duyurdu.</p>

<h2 id="konferanslar">Konferanslar</h2>

<p>Bu sene de geçen sene gibi RailsConf, Euroko, RubyKaigi ve RubyConf gibi konferanslar gördük. Bunlara ek olarak bu sene RubyConfMini adında daha çok ilk kez konuşma vereceklere yönelik yeni bir konferans daha görmüş olduk. Bu konferansların bazılarının videolarına şu an erişim olmasa da beğendiklerimden birkaçını sizlerle paylaşmak istiyorum.</p>

<ul>
  <li><a href="https://www.youtube.com/watch?v=DzyGdOd_6-Y&amp;list=PLbHJudTY1K0f1WgIbKCc0_M-XMraWwCmk&amp;index=2&amp;ab_channel=RubyCentral">RailsConf 2022 — Opening Keynote: The Journey to Zeitwerk by Xavier Noria</a> (bu sene ilk defa RailsConf’da açılış keynote’nu DHH yapmadı.)</li>
  <li><a href="https://www.youtube.com/watch?v=5QgQicKHmeU&amp;ab_channel=RubyCentral">RailsConf 2022 — Keynote: RailsConf 2022 — It’s been a minute! by Aaron Patterson</a></li>
  <li><a href="https://www.youtube.com/watch?v=gseo4vdmSjE&amp;list=PLbFmgWm555yYwwmwMvpC-RaqnmUTKB2EO&amp;index=10&amp;t=1269s&amp;ab_channel=RubyKaigi">[EN]ruby/debug — The best investment for your productivity / Stan Lo @_st0012</a></li>
  <li><a href="https://www.youtube.com/watch?v=gseo4vdmSjE&amp;list=PLbFmgWm555yYwwmwMvpC-RaqnmUTKB2EO&amp;index=10&amp;t=1269s&amp;ab_channel=RubyKaigi">Implementing Object Shapes in CRuby by Jemma Issroff</a></li>
  <li><a href="https://www.youtube.com/watch?v=gseo4vdmSjE&amp;list=PLbFmgWm555yYwwmwMvpC-RaqnmUTKB2EO&amp;index=10&amp;t=1269s&amp;ab_channel=RubyKaigi">The Technical and Organizational Infrastructure of the Ruby Community by Adarsh Pandit</a></li>
</ul>

<h2 id="ruby-türkiye">Ruby Türkiye</h2>

<p>Gelelim bize. Biz neler yaptık koca bir yıl diye bakacak olursak genel olarak geçen seneye göre bu sene biraz daha durgun geçti diyebiliriz. İkisi online bir tanesi de offline olmak üzere toplamda bu sene üç meetup yaptık. Özellikle offline yani yüzyüze yaptığımız meetup çok kalabalıktı ve birbirimizi tekrar görmek iyi geldi. Online meetuplara neden devam edemedik bilmiyorum ama topluluk olarak Ruby’nin de şahlanması ile gelecek yılları daha iyi geçireceğimizi düşünüyorum.</p>

<p>Topluluk bünyesinde gerçekleştirdiğimiz Yakut yayınlarına bu sene gümbür gümbür devam ettik. Bu sene yaklaşık 30–35 yayın yaptığımızı söyleyebilirim. Bu yayınlarda artık Ruby’e dair habeleri daha detaylı incelemeye ve kendi deneyimlerimizi de anlatmaya başladık. 2022 yılında Yakut’ta yeni yüzler de kendini zaman zaman gösterdi ama hep dediğimiz gibi bunun daha kalıcı olmasını istiyor ve aramızda daha fazla yeni yüzler görmek, yayınlarda onları ağırlamak istiyoruz. Bu sene Yakut bir sponsor aldı. <a href="https://parasut.com/">Paraşüt</a> 2022 yılında Yakut’a sponsor olmaya başladı. Kendilerine bir kez daha teşekkür ederiyoruz.</p>

<p>Bu sene geçen seneye göre biraz daha az atraksiyonlu görünse de aslında bir takım işleri yerine oturduğumuz ve meyvelerini yavaş yavaş almaya başladığımız bir dönemin başlangıcı gibi geliyor bana. Geçen sene kurguladığımız çalışma şekli ve açtığımız Discourse gibi yeni kanallar sayesinde topluluk bu sene daha fazla büyüdü ve kendine öz bir sistem oturtmaya başladı diyebilirim. Ayrıca bu sene sonlarına doğru websitemize <a href="https://lab2023.com/">Lab2023</a> sponsor oldu ve topluluk olarak ikinci sponsorumuzu da almış olduk. Kendilerine buradan tekrar teşekkür ediyoruz.</p>

<p>Euruko her sene bir sonraki sene nerede yapılsın diye oylama yapıyor. Euruko2022’de gelecek sene için İstanbul’u aday gösterdik. Sağ olsun Ufuk abi bu Helsinki’de neden İstanbul’da Euruko2023 yapılsın diye orada insanlara <a href="https://youtu.be/JvVAtssjOu0?t=1898">anlattı</a>. Ancak çok minik bir fark ile kazanamadık. Olsun! Tekrar deneyip elbet bir gün Euruko’yu Türkiye’de yapacağız.</p>

<p>Bizler Ruby Türkiye olarak elimizden geleni topluluk adına yapmaya çalışıyoruz. Zaman zaman iş ve hayat yoğunluğu derken bazı şeylere yetişemiyor olsak da hep daha iyi olacağına inanıyor ve topluluğu bırakmıyoruz. Sizler de aramıza katılmak ve destek olmak isterseniz bizlere <strong><a href="https://rubytr.slack.com">Slack kanalımız</a></strong>’dan ulaşabilirsiniz. Ayrıca Ruby Türkiye’nin bütün hesaplarına da kendi <strong><a href="https://www.rubyturkiye.org/">websitesi</a></strong> üzerinden erişebilirsiniz.</p>

<blockquote>
  <p>Ruby dünyasında 2021’de tabii ki benim bu yazdıklarım ile sınırlı değil. Son zamanlarda Ruby dünya da her ne kadar popüler bir dil olarak görülmese de hala eski gücünü koruyor. Bu sene yapılan yeni atılımlar ile 2022’yi Ruby için daha parlak görüyorum.</p>
</blockquote>

<p>Geçen sene bunu demişim ki 2022 cidden Ruby için yeni bir dönemin başlangıcı olduğunu düşünüyorum. Bunun sinyalleri 2021’de verilmişti zaten. Ruby’nin popüler bir dil olması ve daha fazla tercih edilmesi ile gelişmeler daha da artacaktır diye düşünüyorum. Ruby on Rails tarafında ise olan gelişmeler ve yenilikler ile daha fazla geliştiriciye ulaşacak ve web uygulama geliştirme framework’leri arasında eski gücüne kavuşacağını düşünüyorum.</p>

<p>Ruby ile tanışmak için 2023 iyi bir fırsat olabilir. Hiç yazılım bilmiyor olsanız bile bizlere ulaşabilir, istediğiniz soruları sorabilirsiniz. Kapımız her daim herkese açık.</p>

<p>❤️</p>]]></content><author><name>Ender Ahmet Yurt</name><email>enderyurt@gmail.com</email></author><category term="ruby" /><summary type="html"><![CDATA[Merhaba 🙋 2021’in Ruby için nasıl geçtiğine dair bir yazı yazmıştım. Şimdi sıra 2022’ye geldi. Bakalım 2022 Ruby için nasıl geçti.]]></summary></entry><entry><title type="html">Ruby’de Array#compact Kullanımı</title><link href="http://localhost:4000/2022/01/07/ruby-de-compact-kullan%C4%B1m%C4%B1.html" rel="alternate" type="text/html" title="Ruby’de Array#compact Kullanımı" /><published>2022-01-07T14:02:00+03:00</published><updated>2022-01-07T14:02:00+03:00</updated><id>http://localhost:4000/2022/01/07/ruby-de-compact-kullan%C4%B1m%C4%B1</id><content type="html" xml:base="http://localhost:4000/2022/01/07/ruby-de-compact-kullan%C4%B1m%C4%B1.html"><![CDATA[<p>Merhaba 👋 Ruby’de Array’ler ile çalışırken test yazmadığımız zaman sonuçları bize pahallıya patlayabilecek hatalar yapabiliyoruz. Bu hatalardan en çok yapılan bir tanesine değinmek ve ne yapabiliriz diye biraz anlatmak istiyorum.</p>

<p>Senaryomuz şu şekilde olsun. Elimizde içinde Hash’ler olan bir Array var ve biz bu Array içinden Hash’lerin belirli key’lerini alıp yeni bir Array yapmak istiyoruz.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">people</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span> <span class="ss">fullname: </span><span class="s1">'Rees Mcloughlin'</span><span class="p">,</span> <span class="ss">age: </span><span class="mi">11</span> <span class="p">},</span>
    <span class="p">{</span> <span class="ss">fullname: </span><span class="s1">'Kylo Hale'</span><span class="p">,</span> <span class="ss">age: </span><span class="mi">15</span> <span class="p">},</span>
    <span class="p">{</span> <span class="ss">fullname: </span><span class="s1">'Aadam Bass'</span><span class="p">,</span> <span class="ss">age: </span><span class="mi">22</span> <span class="p">},</span>
    <span class="p">{</span> <span class="ss">fullname: </span><span class="s1">'Mikhail Healy'</span><span class="p">,</span> <span class="ss">age: </span><span class="mi">30</span> <span class="p">},</span>
<span class="p">]</span>
</code></pre></div></div>

<p>Elimizdeki bu veriden yetişkin olanların adlarını almak istiyoruz. Aklımıza hızlıca şu yöntem gelebilir.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">ADULT_AGE</span> <span class="o">=</span> <span class="mi">18</span>

<span class="n">adult_people</span> <span class="o">=</span> <span class="p">[]</span>

<span class="n">people</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">person</span><span class="o">|</span>
  <span class="k">next</span> <span class="k">if</span> <span class="n">person</span><span class="p">[</span><span class="ss">:age</span><span class="p">]</span> <span class="o">&lt;</span> <span class="no">ADULT_AGE</span>

  <span class="n">adult_people</span> <span class="o">&lt;&lt;</span>  <span class="n">person</span><span class="p">[</span><span class="ss">:fullname</span><span class="p">]</span>
<span class="k">end</span>

<span class="n">adult_people</span>
<span class="c1"># =&gt; ["Aadam Bass", "Mikhail Healy"]</span>
</code></pre></div></div>

<p>Bu yöntem yanlış değil ancak daha <code class="language-plaintext highlighter-rouge">map</code> ile daha sade yazılabilir.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">ADULT_AGE</span> <span class="o">=</span> <span class="mi">18</span>

<span class="n">adult_people</span> <span class="o">=</span> <span class="n">people</span><span class="p">.</span><span class="nf">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">person</span><span class="o">|</span>
  <span class="k">next</span> <span class="k">if</span> <span class="n">person</span><span class="p">[</span><span class="ss">:age</span><span class="p">]</span> <span class="o">&lt;</span> <span class="no">ADULT_AGE</span>

   <span class="n">person</span><span class="p">[</span><span class="ss">:fullname</span><span class="p">]</span>
<span class="k">end</span>

<span class="n">adult_people</span>
<span class="c1"># =&gt; [nil, nil, "Aadam Bass", "Mikhail Healy"]</span>
</code></pre></div></div>

<p>Kodu <code class="language-plaintext highlighter-rouge">map</code> ile yazmak kodumuzu ne kadar okunaklı yapsa da <code class="language-plaintext highlighter-rouge">each</code> gibi belli bir duruma uymayan değerleri array dışında bırakmıyor, <code class="language-plaintext highlighter-rouge">nil</code> objesi olarak array’e ekliyor. Bu pek istediğimiz bir durum değil. Çözüm için Ruby’deki <code class="language-plaintext highlighter-rouge">Array#compact</code> metotunu kullanabiliriz. <code class="language-plaintext highlighter-rouge">map</code> ile bir dizi içersinde dönüyorsak ve dizideki <code class="language-plaintext highlighter-rouge">nil</code>‘leri kaldırmak istiyorsak <code class="language-plaintext highlighter-rouge">compact</code> ile bunu yapabiliriz.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">ADULT_AGE</span> <span class="o">=</span> <span class="mi">18</span>

<span class="n">adult_people</span> <span class="o">=</span> <span class="n">people</span><span class="p">.</span><span class="nf">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">person</span><span class="o">|</span>
  <span class="k">next</span> <span class="k">if</span> <span class="n">person</span><span class="p">[</span><span class="ss">:age</span><span class="p">]</span> <span class="o">&lt;</span> <span class="no">ADULT_AGE</span>

   <span class="n">person</span><span class="p">[</span><span class="ss">:fullname</span><span class="p">]</span>
<span class="k">end</span><span class="p">.</span><span class="nf">compact</span>

<span class="n">adult_people</span>
<span class="c1"># =&gt; ["Aadam Bass", "Mikhail Healy"]</span>
</code></pre></div></div>

<p>Sevgiler 🙋‍♂️</p>

<p><small><b>Referanslar:</b> https://kaiwern.com/posts/2018/03/28/using-ruby-next-in-map/</small></p>]]></content><author><name>Ender Ahmet Yurt</name><email>enderyurt@gmail.com</email></author><category term="ruby" /><summary type="html"><![CDATA[Merhaba 👋 Ruby’de Array’ler ile çalışırken test yazmadığımız zaman sonuçları bize pahallıya patlayabilecek hatalar yapabiliyoruz. Bu hatalardan en çok yapılan bir tanesine değinmek ve ne yapabiliriz diye biraz anlatmak istiyorum.]]></summary></entry><entry><title type="html">2021’de Ruby</title><link href="http://localhost:4000/2021/12/30/2021-de-ruby.html" rel="alternate" type="text/html" title="2021’de Ruby" /><published>2021-12-30T15:14:00+03:00</published><updated>2021-12-30T15:14:00+03:00</updated><id>http://localhost:4000/2021/12/30/2021-de-ruby</id><content type="html" xml:base="http://localhost:4000/2021/12/30/2021-de-ruby.html"><![CDATA[<p>Merhaba, Bundan önceki <a href="https://medium.com/@eayurt/2021-ve-belki-biraz-%C3%B6ncesi-f3ec22b6a9be">yazımda</a> 2020’nin biraz sonları ve 2021’ kendi hayatımı yorumlamıştım. Şimdi ise 2021 yılında Ruby dünyasında olup bitenleri yazmak istiyorum.</p>

<p>Bu yazının benzerini 2017 yılında da <a href="https://medium.com/@eayurt/2017de-ruby-d1b79a3b8b4">yazmıştım</a>. Bu sene kendimce konuşmak Ruby’de ve Ruby Türkiye’de olup bitenleri de detaylı olarak yazmaya çalışacağım.</p>

<h2 id="ruby-türkiye">Ruby Türkiye</h2>

<p>Covid-19 pandemisi bizlere çevrimiçi etkinlikler de yapabileceğimizi gösterdi. 2020 Aralık ayında başladığımız ve adına <strong>Akşam Oturması</strong> dediğimiz meetup’larımızı düzenli olarak iki haftada bir yapmaya 2021’de de devam ettik. Özellikle 2021’nin Mart ayından Ağustos ayına kadar zaman zaman ayda bire çıkan sıklıklarla buluşmalarımıza devam ettik. Başlarda bir araya geliyor, sohbet ediyorduk. Sonralarda konuşmacılar da davet edip, sunumlu Akşam Oturmaları yapmaya başladık. Bu sene ilk defa meetuplarımızda iki tane yabancı konuşmacı ağırladık. Bütün bu organizasyonları <a href="https://kommunity.com/ruby-turkiye/events/past">Kommunity.com</a> üzerinden organize ettik ve Zoom’da gerçekleştirdik. Konuşmaların kayıtları aldık ve Youtube üzerindeki <a href="https://www.youtube.com/channel/UClXgXxIOKmdMY-EFOLvVgJQ">Ruby Türkiye kanalı</a>nda sunumlardan sonra yükledik.</p>

<p>Topluluk olarak <a href="https://www.youtube.com/playlist?list=PLEWqXxI7lAZIHZ4s3fcuy1UmF_YiQkZpi">Yakut</a> adında haftalık olarak Ruby dünyasında olup bitenleri konuştuğumuz podcast’i, her cumartesi saat 21:30 ve 22:30 arasında Youtube canlı yayını olarak yapmaya başladık. İlk bölümüne 27 Mart’ta başladık ve 34 bölümdür dur durak bilmeden devam ediyoruz. Yakut daha sonra Twitter’da Periscope yayınlarına da Youtube yayınlarına paralel olarak başladı ve canlı yayın kanalımızı ikiye çıkardık.</p>

<p>En başından beri yoğun olarak kullandığımız <a href="https://rubytr.slack.com/">Slack</a> kanalımız’da sorular soruların ve bazı değerli konuşmaların kaybolduğunu, ayrıca daha farklı konuşmaların da dönebileceğini düşünerek <a href="https://discuss.rubyturkiye.org/">Ruby Türkiye Discourse</a>’unu açtık. Buradan gelen sorulara ve yorumlara cevaplar vererek, topluluk için daha faydalı olmaya çalışıyoruz.
2021 Türkiye ekonomisi için zor geçti. Bu zorluklar biz yazılımcıları video eğitim veya kitap gibi her ne tüketmek istiyorsak döviz üzerinden alışveriş yapmak durumunda olduğumuz için daha fazla etkiledi. Bu etkilenmeyi biraz olsun azaltmak için <strong><a href="https://www.driftingruby.com/">Driffting Ruby</a></strong>, <strong><a href="https://gorails.com/dashboard">Go Rails</a></strong> ve <strong><a href="https://flurly.com/p/ruby-garbage-collection">Ruby Garbage Collection in Under Two Hours</a></strong> eğitim içeriklerine sadece Ruby Türkiye Slack grubunda bulunanlara indirimler sağladık. Sizlerde Ruby Türkiye Slack kanalına gelip, benimle iletişime geçerseniz, bu kaynaklar için indirim kodlarınızı alabilirsiniz.</p>

<p>Bütün bir yıl içinde yaptıklarımızı ve daha fazlasını konuşmak adına yönetim işlerimizi <a href="https://basecamp.com/">Basecamp</a>’e taşıdık. Burada daha organize ve ne yaptığımızı bilerek hareket etmeye başladık. 2020 sonlarında çekirdek kadromuz 3 iken şuan 9’a çıktı. Bu sene topluluk için her zaman bir şeyler yapmaya çalışan <a href="https://twitter.com/paracycle">Ufuk Kayserilioğlu</a>, <a href="https://twitter.com/toziserikan">Tayfun Öziş Erikan</a>, <a href="https://www.linkedin.com/in/yasarcelep">Yaşar Celep</a>, <a href="https://twitter.com/m_dilmac">Muhammed Dilmaç</a>, <a href="https://twitter.com/ogirginc">Oğulcan Girginç</a> ve zaman zaman aramıza katılıp, bizlerle bilgileri paylaşan <a href="https://twitter.com/sdogruyol">Serdar Doğruyol</a>’a çok teşekkürler ❤️ Ayrıca sene sonuna doğru aramıza katılan ve çok güzel işler yapacaklarına inandığımız Merve Şahan, Fadime Özhan ve Kemal Akın ve Çoşkun Tekin’e de hoş geldiniz demek istiyorum.</p>

<h2 id="ruby-30">Ruby 3.0</h2>

<p>Ruby büyük release’leri Christmas’da yaptığı için 2020 sonlarında Ruby 3 hayatımıza girdi ve gelişmesi 2021 boyunca sürdü. Ben bu yazıyı yazarken Ruby 3.1 çıktı. <strong><a href="https://www.ruby-lang.org/en/news/2020/12/25/ruby-3-0-0-released/">Ruby 3</a></strong> ile artık Ruby 2’deki yavaşlık konuları biraz olsun rafa kalkmaya başladı. Şimdilik çok fazla Ruby 3 kullanan duymuyoruz, ancak Ruby 3.1’in çıkması ve Rails 7’de Ruby 2.7 ve üstünün zorunlu olması ile kullanımı artacaktır. Ruby 3 temelde üç ana başlığa odaklandı: Performance, Concurrency ve Typing(Static Analysis). Bunların her biri için ayrı ayrı detaylar verilebilir ama hepsi için de ayrı yazılar yazmak gerekir. Biz Yakut’ta zaman zaman bu konulari detaylı olarak konuştuk, ve dilimiz döndüğünce anlatmaya çalıştık.</p>

<h2 id="ruby-on-rails-700">Ruby on Rails 7.0.0</h2>

<p>Benim bu sene en çok beklediğim ve senenin sonuna doğru çıkan <strong><a href="https://rubyonrails.org/2021/12/15/Rails-7-fulfilling-a-vision">Ruby on Rails 7.0.0</a></strong> topluluğu bayağı mutlu etti diyebilirim. RoR, versiyonları bir günde bakın yeni versiyon çıktık şeklinde çıkarmıyor, topluluk neler yapıyorsa ve kabul görüyorsa main branch’lerine merge ediyor ve developer’lar için kullanıma direk açıyor. RoR 7’de de bu şekilde yaklaşık bir senedir geliştiriliyor ve biz Yakut’da bu konuların çoğuna yer vermeye çalışıyoruz.. RoR 7 bizlere diğer RoR versiyonlarından özellikle 6. versiyondan farklı birçok şey getiriyor. Bunların başında Webpacker’in kalkması ve import map’lerin kullanılmaya başlaması heyecan verici. Bu konu hakkında DHH’in güzel bir <a href="https://world.hey.com/dhh/modern-web-apps-without-javascript-bundling-or-transpiling-a20f2755">yazısı</a> var, incelemenizi tavsiye ederim. Single Page Application yaklaşımından uzaklaşmak ve buradaki karmaşıklığı çözmek adına Hotwire dedikleri bir yaklaşım ile karşımıza çıktılar. <strong><a href="https://hotwired.dev/">Hotwire</a></strong> kavram olaral çok yeni olmasa da <strong><a href="https://turbo.hotwired.dev/">Turbo</a></strong> ve <strong><a href="https://stimulus.hotwired.dev/">Stimulus</a></strong> ile bizlere web geliştirme yaparken daha az hatta belki hiç Javascript yazmadan web geliştirmeler yapma imkanı sunuyor. RoR 7 ile CSS bundling de artık daha kolay olmaya ve şuan desteklediği, Tailwind CSS, Bootstrap, Bulma, PostCSS, or Dart Sass’i projelerimizde kolayca entegre etme ve kullanma imkanı sunuyor. Backend tarafında ise daha güvenli ve daha hızlı bir web framework’ü yapabilmek adın yaptıkları geliştirmeleri de görebiliyoruz. Özellikle <a href="https://github.com/rails/rails/pull/41659">Active Record Encryption</a>, <a href="https://github.com/rails/rails/pull/41659">Asynchronous Query Loading</a> ve <a href="https://github.com/fxn/zeitwerk#introduction">Zeitwerk</a> bunlara örnek verilebilir.</p>

<h2 id="the-one-person-framework">The One Person Framework</h2>

<p>DHH’in Aralık ortalarında yazdığı bu <a href="https://world.hey.com/dhh/the-one-person-framework-711e6318">yazı</a> aslında biraz Ruby on Rails 7’nin arkasında yatan motivasyonu anlatıyor ve Rails 7’nin özetini yapıyor. Ancak burada dikkat edilmesi gereken Rails 7 ile sadece bir framework size yeterli ve bu framework ile web’de istediklerinizi yapabilirsiniz yaklaşımı. Daha fazlasına neden ihtyacınız var? Bu sorunun cevabını özellikle startup’lar Rails 4 ve bazen 5 zamanında vermişlerdi. Rails 7 ile daha fazla startup hatta bence scaleup’lar Rails ile güzel işleri, daha zahmetsiz ve hızlı bir şekilde yapmaya başlayacaklar.</p>

<h2 id="konferanslar">Konferanslar</h2>

<p>RailsConf 2021, Euroko2021, RubyKaigi ve RubyConf 2021 ile bu sene de dört önemli konferans görduk Ruby dünyasında. Bu konferanslardan önerebileceğim birkaç konuşmayı paylaşmak istiyorum.</p>

<ul>
  <li><a href="https://www.youtube.com/watch?v=FU9wz998-1k&amp;ab_channel=RubyCentral">RailsConf 2021 — Keynote: All the Things I Thought I Couldn’t Do by Eileen Uchitelle</a></li>
  <li><a href="https://www.youtube.com/watch?v=AFpq1pDQagw&amp;ab_channel=RubyCentral">RailsConf 2021- Profiling to make your Rails app faster by Gannon McGibbon</a></li>
  <li><a href="https://www.youtube.com/watch?v=lxczDssLYKA&amp;ab_channel=Euruko">Euroko 2021 - Building a Ruby web app using the Ruby Standard Library by Maple Ong</a></li>
  <li><a href="https://www.youtube.com/watch?v=x_YhDCNeFQ8&amp;ab_channel=Euruko">Euroko 2021- Optimizing Ruby’s memory layout by Peter Zhu &amp; Matthew Valentine-House</a></li>
  <li><a href="https://www.youtube.com/watch?v=zO9_uTaELCw&amp;ab_channel=RubyCentral">RubyConf 2021 - YJIT: Building a new JIT Compiler inside CRuby by Maxime Chevalier Boisvert</a></li>
  <li><a href="https://www.youtube.com/watch?v=a3jfpSmikdg&amp;ab_channel=RubyCentral">RubyConf 2021 - Gradual Typing in Ruby, A Three Year by Ufuk Kayserilioglu, Alexandre Terrasa</a></li>
</ul>

<h2 id="sonuç">Sonuç</h2>

<p>Ruby dünyasında 2021’de tabii ki benim bu yazdıklarım ile sınırlı değil. Son zamanlarda Ruby dünya da her ne kadar popüler bir dil olarak görülmese de hala eski gücünü koruyor. Bu sene yapılan yeni atılımlar ile 2022’yi Ruby için daha parlak görüyorum.</p>

<p>2022 yılın için yeni bir programlama dili ve yeni insanlarla tanışma planlarınız varsa Ruby Türkiye’yi ziyaret etmenizi tavsiye ederim. Bizlere Slack, Twitter ve Email üzerinden ulaşabilir, yukarıda paylaştığım <a href="https://discuss.rubyturkiye.org/">Ruby Türkiye Discourse</a>’a gelip, kendinizi tanıtıp, nereden başlayabilirim diye sorabilirsiniz. Kapımız iyi yazılımcılar olmak isteyen herkese açık. Ruby’i sevmiyorsanız bile buluşmalarımıza bekliyoruz, kim bilir belki bizi seversiniz :)
Sevgiler.</p>

<p><small><em><b>Not:</b> Bu yazının orjinal haline Medium’daki <a href="https://medium.com/@eayurt/2021de-ruby-f3a534866cfb">yazım</a>‘dan ulaşabilirsiniz.</em></small></p>]]></content><author><name>Ender Ahmet Yurt</name><email>enderyurt@gmail.com</email></author><category term="ruby" /><summary type="html"><![CDATA[Merhaba, Bundan önceki yazımda 2020’nin biraz sonları ve 2021’ kendi hayatımı yorumlamıştım. Şimdi ise 2021 yılında Ruby dünyasında olup bitenleri yazmak istiyorum.]]></summary></entry><entry><title type="html">Sorbet ile Static Typing</title><link href="http://localhost:4000/2020/11/17/sorbet-ile-static-typing.html" rel="alternate" type="text/html" title="Sorbet ile Static Typing" /><published>2020-11-17T14:41:00+03:00</published><updated>2020-11-17T14:41:00+03:00</updated><id>http://localhost:4000/2020/11/17/sorbet-ile-static-typing</id><content type="html" xml:base="http://localhost:4000/2020/11/17/sorbet-ile-static-typing.html"><![CDATA[<p>Merhaba, Ruby her ne kadar süper sevimli bir dil olsa da dinamik bir dil olduğu için yazılan kodlarda ortaya çıkan hatalar ancak runtime’da kendini gösterebiliyor.</p>

<p>Ancak statik programlama dillerinde kodlarda ortaya çıkan hataları compile time’da alabiliyoruz. Bu duruma bir örnek vermek gerekirse Ruby’de</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">animal</span> <span class="o">=</span> <span class="s1">'Foo'</span>
<span class="n">animal</span><span class="p">.</span><span class="nf">greeting</span>
</code></pre></div></div>

<p>Yukarıdaki kod bize ancak code çalıştığı zaman <code class="language-plaintext highlighter-rouge">NoMethodError</code> hatasını dönecektir. Ancak bu kodu Java gibi compile edilen bir dil ile yazsaydik, hatayı kod compile edildiği zaman alacaktık ve kod içindeki hatalari minimize etme şansımız olacaktı.</p>

<h2 id="sorbet">Sorbet</h2>

<p>Ruby için geliştirilmiş ve kodunuzdaki method tanımlarını, method signature kontrolleri ve değişken tiplerinin kontrolünü yapan bir Ruby Gem’i. Özünde normal Ruby gibi kodumuzu yazıyoruz ancak Sorbet kullanmak istiyor ve type check yapmak istiyorsak ile Sorbet’in <code class="language-plaintext highlighter-rouge">T::Sig</code> modulünü kullanarak kontrollerimizi yapabiliyoruz.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># typed: true</span>
<span class="nb">require</span> <span class="s1">'sorbet-runtime'</span>

<span class="k">class</span> <span class="nc">A</span>
  <span class="kp">extend</span> <span class="no">T</span><span class="o">::</span><span class="no">Sig</span>

  <span class="n">sig</span> <span class="p">{</span><span class="n">params</span><span class="p">(</span><span class="ss">x: </span><span class="no">Integer</span><span class="p">).</span><span class="nf">returns</span><span class="p">(</span><span class="no">String</span><span class="p">)}</span>
  <span class="k">def</span> <span class="nf">bar</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="n">x</span><span class="p">.</span><span class="nf">to_s</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">main</span>
  <span class="no">A</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">barr</span><span class="p">(</span><span class="mi">91</span><span class="p">)</span>   <span class="c1"># error: Typo!</span>
  <span class="no">A</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">bar</span><span class="p">(</span><span class="s2">"91"</span><span class="p">)</span>  <span class="c1"># error: Type mismatch!</span>
<span class="k">end</span>
</code></pre></div></div>

<p>İlk olarak Sorbet’e statik tip kontrollerini ne şekilde raporlaması gerektiğini belirtmek gerekiyor. <code class="language-plaintext highlighter-rouge"># typed: true</code> dediğimiz zaman normal type hatalarını raporla demek oluyor. Bu şekilde yapabileceğimiz tam beş adet level var. Bu tiplere ve detaylarına <a href="https://sorbet.org/docs/static">buradan</a> ulaşabilirsiniz. <code class="language-plaintext highlighter-rouge">sorbet-runtime</code>‘ı require ediyoruz çünku bu kod çalıştırıldığı zaman da hatayı bize döndürsün istiyoruz. Sonrasinda <code class="language-plaintext highlighter-rouge">A</code> adında bir class’ımız var ve bu class’ın instance’ının bir <code class="language-plaintext highlighter-rouge">bar</code> adında bir methodu var. Ruby’de methodlara verilen parametlerin tipi ve method’ların döndürdüğü değelerin tiplerinin pek önemi olmazken Sorbet ile bunlari <code class="language-plaintext highlighter-rouge">sig</code> methodu ile belirleyebiliyoruz. <code class="language-plaintext highlighter-rouge">sig {params(x: Integer).returns(String)}</code> ile bu method integer tipinde bir parametre alır ve String tipinde birşey döner diyoruz.</p>

<p>Siz de Sorbet’i hızlica denemek istiyorsaniz <a href="https://sorbet.run/#%23%20typed%3A%20true%0Arequire%20'sorbet-runtime'%0A%0Aclass%20A%0A%20%20extend%20T%3A%3ASig%0A%0A%20%20sig%20%7Bparams(x%3A%20Integer).returns(String)%7D%0A%20%20def%20bar(x)%0A%20%20%20%20x.to_s%0A%20%20end%0Aend%0A%0Adef%20main%0A%20%20A.new.barr(91)%20%20%20%23%20error%3A%20Typo!%0A%20%20A.new.bar(%2291%22)%20%20%23%20error%3A%20Type%20mismatch!%0Aend">buradan</a> online Sorbet runtime aracını kullanabilirsiniz.</p>

<h3 id="kurulum">Kurulum</h3>

<p>Sorbet’i projelerimize eklemek için öncelikle <code class="language-plaintext highlighter-rouge">Gemfile</code> dosyamıza Sorbet ve Sorbet Runtime Gem’lerini eklememiz gerekiyor.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># -- Gemfile --

gem 'sorbet', :group =&gt; :development
gem 'sorbet-runtime'
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">$ bundle install</code> ile Gem’leri indirdikten sonra artık Sorbet kullanmaya başlayabiliriz.</p>

<h3 id="kullanım">Kullanım</h3>

<p>Sorbet’i kullanacağımız projenin altinda <code class="language-plaintext highlighter-rouge">$ srb init</code> diyerek Sorbet için gerekli olan dosyaları oluşturuyoruz. Bu dosyalar Sorbet tarafından otomatik oluşuyor. <code class="language-plaintext highlighter-rouge">sorbet</code> klasörü altında <code class="language-plaintext highlighter-rouge">config</code> dosyasi ve <code class="language-plaintext highlighter-rouge">rbi</code> klasörü bulunuyor. <code class="language-plaintext highlighter-rouge">config</code> dosyası içinde Sorbet için commandline ayarlarını yapabilirsiniz. Daha fazla detaya <a href="https://sorbet.org/docs/cli">buradan</a> bakabilirsiniz. <code class="language-plaintext highlighter-rouge">rbi</code> klasörü içinde ise Sorbet içinde bulunmayan sizin kendi class, module ve diğer nesne tanımlarınızı yapabilir, Sorbet’te bunları kullanabilirsiniz. Sorbet ile gelen RBI dosyalarına <a href="buradan">buradan</a> ulaşabilirsiniz.</p>

<p>Kendi yazdığımız Ruby kodlarındaki type check’leri yapmak için ise, <code class="language-plaintext highlighter-rouge">$ srb tc</code> komudunu çalıştırarak yapabiliriz.</p>

<h3 id="örnek">Örnek</h3>

<p>Ben daha önceden yazmış olduğum Ruby Gem’ime Sorbet’i ekledim. Bu <a href="https://github.com/enderahmetyurt/bilisim_sozlugu/commit/6854a4a607461073b2dc69569b70deeee040c0ec">commit</a>‘te görüldüğü gibi <code class="language-plaintext highlighter-rouge">search</code> methoduna <code class="language-plaintext highlighter-rouge">sig {params(word: String).void}</code> ekledim. Bu method konsola birşeyler bastığı için <code class="language-plaintext highlighter-rouge">nil</code> dönüyordu ve <code class="language-plaintext highlighter-rouge">void</code> ile aslında bu method’un birşey dönmediğini belirttim. Ayrıca lokal değişkenlere de tipler tanımladım. Mesela <code class="language-plaintext highlighter-rouge">CSS_SELECTOR</code> için sadece String olabilir demek istedim ve <code class="language-plaintext highlighter-rouge">CSS_SELECTOR = T.let("table tbody tr".freeze, String)</code> bu şekilde yazarak bu değişken sadece String kabul etmelidir dedim. Kodun diğer yerlerinde eğer bu değişkeni String dışında bir tipe eşitlersem Sorbet bana hata dönecek. Sizler de bu kodu düzeltmek isterseniz PR’larınızı memnuniyet ile bekliyorum.</p>

<h3 id="sonuç">Sonuç</h3>

<p>Ben Sorbet’i çok sevdim ve kendi yazdığım küçük Ruby projeleri için implemente etmeye başladım. Hepinizin merak ettiği bu iş Ruby on Rails’da nasıl oluyor sorularına ise kısa bir zamanda cevap verebilmeyi ben de istiyorum. Konu ile alakalı <a href="https://flexport.engineering/adding-sorbet-to-a-rails-monolith-ef72d6a18449">şöyle</a> bir yazı var, isterseniz inceleyebilirsiniz.</p>

<p>Ruby her ne kadar süpersonik bir dil olsa da her güzelin bir kusuru var ve o kusurda Sorbet ile biraz olsun kapatılabiliyor.</p>

<p>Sevgiler.</p>

<p><em>Referanslar:</em></p>

<ul>
  <li><a href="https://blog.heroku.com/static-typing-ruby-with-sorbet">https://blog.heroku.com/static-typing-ruby-with-sorbet</a></li>
  <li><a href="https://medium.com/better-programming/static-typed-ruby-introducing-sorbet-from-stripe-eeb4ffd8644">https://medium.com/better-programming/static-typed-ruby-introducing-sorbet-from-stripe-eeb4ffd8644</a></li>
  <li><a href="https://sorbet.org/docs/overview">https://sorbet.org/docs/overview</a></li>
</ul>]]></content><author><name>Ender Ahmet Yurt</name><email>enderyurt@gmail.com</email></author><category term="ruby" /><category term="sorbet" /><summary type="html"><![CDATA[Merhaba, Ruby her ne kadar süper sevimli bir dil olsa da dinamik bir dil olduğu için yazılan kodlarda ortaya çıkan hatalar ancak runtime’da kendini gösterebiliyor.]]></summary></entry><entry><title type="html">Ruby 3 ile Gelebilecek Özellikler</title><link href="http://localhost:4000/2020/09/29/ruby-3-ile-gelebilecek-%C3%B6zellikler.html" rel="alternate" type="text/html" title="Ruby 3 ile Gelebilecek Özellikler" /><published>2020-09-29T14:03:00+03:00</published><updated>2020-09-29T14:03:00+03:00</updated><id>http://localhost:4000/2020/09/29/ruby-3-ile-gelebilecek-%C3%B6zellikler</id><content type="html" xml:base="http://localhost:4000/2020/09/29/ruby-3-ile-gelebilecek-%C3%B6zellikler.html"><![CDATA[<p>Merhaba, Ruby 3 2020 Aralık ayında yayına çıkmış olacak. Güzel özelliklerle geliyor olsa da bu özelliklerden hangilerinin hala Ruby 3 içerisinde olup olmayacağı tartışma konusu.</p>

<p>Deneysel özelliklerin bir kısmı Ruby 2.7 ile bizlerin kullanılımına sunuluyor ve deneme, test etme şansı buluyoruz. Bu yazıda Ruby 3’de görmemiz muhtemelen birkaçından bahsedeceğim.</p>

<p>Matz geçenlerde Github sponsorlarına bir anket gönderdi. Anket, hangi özelliği Ruby 3’de görmek istediğimiz ile alakalıydı. Seçenekler arasında ise şu özellikler vardı:</p>

<ul>
  <li>Ractor</li>
  <li>JIT</li>
  <li>Type Profiler / Static Type Analysis</li>
  <li>Heap Compaction (GC Improvement)</li>
  <li>Pattern Matching</li>
  <li>Right Assignment</li>
</ul>

<p>Şimdi bunlara tek tek bakalım.</p>

<h2 id="ractor">Ractor</h2>

<p>Eski adı Guild olan bir özellikte çalışan Koichi Sasada Matz’ın da önerisi ile adını Ractor’a çevirdi. Mantığının ise <code class="language-plaintext highlighter-rouge">"Ractor," Ruby's Actor-like feature (not an exact Actor-model)</code> geldiğini söylüyor. Konu aslında MRI Ruby’nin kodu parallel çalıştırmasına izin vermemesinden geliyor. Guild yani yeni ismi ile Ractor, Ruby için yeni bir concurrency modeli öneriyor. Burada asıl amaç Ruby 3 ile bu modeli kurarken Ruby 2 ile uyumluluğu korumak ve parallel çalışabilecek parçaları ve objeleri hızlı bir şekilde paylaşımına izin vermek. Ruby’deki yaygın concurrency problemlerden biri thread’lerin race condition’lar oluşturup, oluşturmadığından emin olmaktır. Ruby’deki <code class="language-plaintext highlighter-rouge">Thread::Mutex</code> ile bunun önüne geçebilirsiniz fakat bu sefer de paralelliği ortadan kaldırmış ya da yavaşlatmış olursunuz.</p>

<p>Ruby’de Thread ve Fiber olmak üzere iki tane sınıf var. Thread’ler işletim sistemi seviyesinde kodun parallel çalışmasını sağlarken, Fiber ise parallel çalışacak kodların manuel olarak planlamasının yapılmasına izin verir. Guild’ı ise bu ikisinin birlikte uygulanması ile ortaya çıkar. Şöyle diyebiliriz; Bir Guild içerisinde en az bir Thread ve onun da içerisinde en az bir Fiber bulunur. Guild içerisindeki Thread’ler paralel çalışamazken, farklı Guild’dekiler çalışabilir.</p>

<p>Bir Guild’deki mutable bir obje başka bir Guild’den obje tarafından okunamaz ya da değiştirilemez. Bu sebeple Guild’lerin parallel çalışması sağlanır. <code class="language-plaintext highlighter-rouge">Guild::Channel</code> ile bunu yapmak da mümkündür. Bu yöntem ile bir obje diğer Guild’de kopyalanır ve ilgili Guild’e gönderilir.</p>

<p>Ractor (Guild) ile alakalı daha fazla bilgiye ve örneğe buradan ulaşabilirsiniz. <a href="https://github.com/ko1/ruby/blob/ractor_parallel/doc/ractor.md">https://github.com/ko1/ruby/blob/ractor_parallel/doc/ractor.md</a></p>

<p>Sonuçta bu özellik ile artık Ruby’de thread-safe konularına kafayı takmadan paralel işler yapabileceğiz gibi duruyor.</p>

<h2 id="jit">JIT</h2>

<p>Uzun adi Just In Compile olan JIT Ruby programlarının makine kodlarına dönüştürür. Diğer derleyicilerden farklı olarak bütün kod derlemez sadece kodun değiştirilen yerlerini derler. JIT ne kadar hızlanma getirir ve neler götürür bu konuda bazı çalışmalar <a href="https://eregon.me/blog/2016/11/28/optcarrot.html">https://eregon.me/blog/2016/11/28/optcarrot.html</a> olsa da yorumlanan bir Ruby’den daha hızlı olacağı kesin.</p>

<p>JIT’in avantajı kadar yanında getirdiği ve muhtemelen geliştirilecek bir takım dezavantajları da var. Bunlardan biri memory kullanımı diğeri ise warmup süresinin uzunluğu.</p>

<p>Bildiğim kadarı ile JIT şuan Ruby 2.6’da var ve <code class="language-plaintext highlighter-rouge">-jit</code> flag’i ile kullanılabiliyor. Ruby on Rails gibi büyük gem’lerde henüz kullanılmıyor diye biliyorum ancak daha küçük işler için tercih edilebilir.</p>

<p>JIT konusu hakkında çalışan Takashi Kokubun, Ruby Rouges podcast’ine konuk olmuş. Daha fazla detayı <a href="https://devchat.tv/ruby-rogues/rr-470-performance-improvement-of-ruby-3-0-jit-with-takashi-kokubun/">buradan</a> dinleyebilirsiniz.</p>

<h2 id="type-profiler--static-type-analysis">Type Profiler / Static Type Analysis</h2>

<p>Tip kontrolü ve statik tipli bir dil olmaya doğru giden Ruby, bu özelliği ile beni de heyecanlandırıyor. Dinamik bir dil olan Ruby’nin statik bir dil olma yolunda attığı adımlardan biri RBS <a href="https://github.com/ruby/rbs">https://github.com/ruby/rbs</a> dili diyebiliriz. RBS, Ruby 3 için bir tip imzalama dili. Type’ları olan kodlar artik RBS dosyaları içine yazılmaya başlıyor ki bu da mevcut Ruby kodunun karışmasını engelliyor.</p>

<p>Aslında şuan Sorbet projesi ile type check yapılabiliyor. Sorbet ve Ruby geliştiricileri RBS için birlikte işler çıkarmaya çalışıyorlar.</p>

<p>Herkes RBS kullanmak zorunda değil tabiki ama tiplerin ve tip kontrolünün gelmesi Ruby’e daha fazla güç ve çeşitlilik katacaktır diye düşünüyorum. Yazılan kodun kalitesi ve hata oranı ne kadar azalsa da dinamik bir dilde program yazmak, statik bir dile göre her zaman daha hızlı olacağı da aşikar.</p>

<h2 id="heap-compaction-gc-improvement">Heap Compaction (GC Improvement)</h2>

<p>Ruby’de garbage collection gibi bellek yönetim işleri ile pek uğraşmaya gerek yok. Zaten en güzel yanı da bu değil mi? :) Ancak işler karmaşıklaştıkca ve programlar büyüdükce programlama dillerinin de kendi garbage collector’larında geliştirmeler yapması gerekir.</p>

<p>Ruby 2.7 ile aslında şuan kullanılabilen heap compaction özelliği ile Ruby’de garbage collector daha verimli bir hale geldi. Bu özellik sayesinde program için memory’de kullanılmak istenen alana heap denir. Bu heap objeler için kullanıldikca veya heap içindeki objeler serbest kaldıkca memory içerisinde boşluklar oluşur ve memory dağınık bir hale gelir. Ayrılan bütün hafızayı birlikte kullanmaktansa heap içindeki kullanılan memory sıkıştırılır boşluklar da değerlendirilmiş olur.</p>

<h2 id="pattern-matching">Pattern Matching</h2>

<p>Ruby 2.7 ile hayatımıza giren bu özelliğe pek ısındım diyemem. Ama seveni de vardır elbet. Elixir kullananlar zaten bu özelliğe aşinadırlar. Küçük bir örnekle anlatacak olursak</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="nb">name</span><span class="p">,</span> <span class="n">surname</span><span class="p">,</span> <span class="mi">20</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="ss">:foo</span><span class="p">,</span> <span class="s2">"bar"</span><span class="p">,</span> <span class="mi">20</span><span class="p">]</span>
<span class="nb">name</span> <span class="c1">#=&gt; :foo</span>
<span class="n">surname</span> <span class="c1">#=&gt; "bar"</span>
</code></pre></div></div>

<p>ancak eşitliğin iki tarafındaki pattern ayni olmadığı vakit sorun çıkacaktır. Örneğin <code class="language-plaintext highlighter-rouge">[name, surname, 30] = [:foo, "bar", 20]</code> bu şekilde yaparsak hata alacağız.</p>

<p>Pattern Matching işimize daha çok if veya when statement’larda işimize yarayacak gibi duruyor. Daha fazlası Hash’lerde ve Array’lerde de bu özellik çokça kullanılabilir. Ancak tehlikeli olan şu ki yeni syntax biraz kafa karıştırıcı ve alışması zor olabilir. Bazı karışık condition’lar için yararlı gibi duruyor ancak kullanımı o kadar kolay olduğunu söyleyemem.</p>

<h3 id="right-assignment">Right Assignment</h3>

<p>Neden diye sordurttan bir özellik daha. Soldan sağa kod okumaya alıştığımız için bu özellik bizlere biraz zor gelecektir.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="s1">'hello'</span> <span class="o">=&gt;</span> <span class="n">foo</span> <span class="c1"># This is equivalent to foo = 'hello'</span>
</code></pre></div></div>

<p>Burada çok anlamlı değil ama şu örnek için güzel duruyor.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">full_name</span>
  <span class="p">[</span><span class="s1">'foo'</span><span class="p">,</span> <span class="s1">'bar'</span><span class="p">]</span>
<span class="k">end</span>

<span class="n">full_name</span> <span class="o">=&gt;</span> <span class="nb">name</span><span class="p">,</span> <span class="n">surname</span>
</code></pre></div></div>

<p>aslında burada yapılmak istenden <code class="language-plaintext highlighter-rouge">name, surname = full_name</code></p>

<h3 id="sonuç">Sonuç</h3>

<p>Tüm bunlar tabiki bu kadar az değil. Çok fazla detayın olduğu ve dikkatli bakıldığında hepsi Ruby’e bir şekilde birşeyler katacak özellikler. Benim şahsi fikrim Ruby zaten rahat yazılabilen ve okunabilen bir dil. Bazı performans problemleri de halledildikten sonra daha iyi bir dil olacağı kesin. Ruby 3 ile umarim performansa yönelik geliştirmelere daha fazla önem verirler.</p>

<p>Sevgiler.</p>

<p><em>Referanslar:</em></p>

<ul>
  <li><a href="https://bugs.ruby-lang.org/issues/17100">https://bugs.ruby-lang.org/issues/17100</a></li>
  <li><a href="https://olivierlacan.com/posts/concurrency-in-ruby-3-with-guilds/">https://olivierlacan.com/posts/concurrency-in-ruby-3-with-guilds/</a></li>
  <li><a href="https://engineering.appfolio.com/appfolio-engineering/2017/12/26/ruby-3-and-jit-where-when-and-how-fast">https://engineering.appfolio.com/appfolio-engineering/2017/12/26/ruby-3-and-jit-where-when-and-how-fast</a></li>
  <li><a href="https://developer.squareup.com/blog/the-state-of-ruby-3-typing/">https://developer.squareup.com/blog/the-state-of-ruby-3-typing/</a></li>
  <li><a href="https://stackify.com/how-does-ruby-garbage-collection-work-a-simple-tutorial/">https://stackify.com/how-does-ruby-garbage-collection-work-a-simple-tutorial/</a></li>
  <li><a href="https://www.toptal.com/ruby/ruby-pattern-matching-tutorial">https://www.toptal.com/ruby/ruby-pattern-matching-tutorial</a></li>
  <li><a href="https://bugs.ruby-lang.org/issues/15921">https://bugs.ruby-lang.org/issues/15921</a></li>
  <li><a href="https://blog.saeloun.com/2020/08/31/ruby-adds-experimental-rightward-assignment.html">https://blog.saeloun.com/2020/08/31/ruby-adds-experimental-rightward-assignment.html</a></li>
</ul>]]></content><author><name>Ender Ahmet Yurt</name><email>enderyurt@gmail.com</email></author><category term="ruby" /><summary type="html"><![CDATA[Merhaba, Ruby 3 2020 Aralık ayında yayına çıkmış olacak. Güzel özelliklerle geliyor olsa da bu özelliklerden hangilerinin hala Ruby 3 içerisinde olup olmayacağı tartışma konusu.]]></summary></entry><entry><title type="html">Ruby on Rails’da çoklu veritabanı</title><link href="http://localhost:4000/2019/06/22/ruby-on-rails-da-%C3%A7oklu-veritaban%C4%B1.html" rel="alternate" type="text/html" title="Ruby on Rails’da çoklu veritabanı" /><published>2019-06-22T20:01:00+03:00</published><updated>2019-06-22T20:01:00+03:00</updated><id>http://localhost:4000/2019/06/22/ruby-on-rails-da-%C3%A7oklu-veritaban%C4%B1</id><content type="html" xml:base="http://localhost:4000/2019/06/22/ruby-on-rails-da-%C3%A7oklu-veritaban%C4%B1.html"><![CDATA[<p>Merhaba. Ruby on Rails’ın son versiyonu olan 6. versiyonu ile gelen <a href="https://edgeguides.rubyonrails.org/active_record_multiple_databases.html"><strong>multiple database</strong></a> özelliği ile artık çoklu veritabanı yönetimi yapılabiliyor.</p>

<p>Bu durumun birçok anlamı var;</p>

<ul>
  <li>Bir veritabanının replikasını oluşturup, onlar üzerinde çalışmalar yapabilmek.</li>
  <li>Birincil ve replika veritabanları arasında HTTP metotları ile otomatik geçişler yapabilmek.</li>
  <li>Çoklu veritabanlarında Rails’ın task’larını çalıştırabilmek.</li>
</ul>

<p>Bunların yanında ise henüz desteklenmeyen özellikler arasında ise <strong>sharding</strong> ve replikalar arası <strong>load balancing</strong> başta geliyor.</p>

<p>Çoklu veritabanı için ayarları yapmak Rails 6’da çok kolay. Daha önce Ruby on Rails kullananlar bilecektir ki veritabanı ayar dosyası <code class="language-plaintext highlighter-rouge">config/database.yml</code>‘da tutulur. Bu dosya üzerinde yeni bir takım eklemeler ile uygulamanız için çoklu veritabanlarını tanımlayabilirsiniz.</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">production</span><span class="pi">:</span>
  <span class="na">primary</span><span class="pi">:</span>
    <span class="na">database</span><span class="pi">:</span> <span class="s">my_primary_database</span>
    <span class="na">user</span><span class="pi">:</span> <span class="s">root</span>
    <span class="na">adapter</span><span class="pi">:</span> <span class="s">mysql</span>
  <span class="na">primary_replica</span><span class="pi">:</span>
    <span class="na">database</span><span class="pi">:</span> <span class="s">my_primary_database</span>
    <span class="na">user</span><span class="pi">:</span> <span class="s">root_readonly</span>
    <span class="na">adapter</span><span class="pi">:</span> <span class="s">mysql</span>
    <span class="na">replica</span><span class="pi">:</span> <span class="kc">true</span>
  <span class="na">cities</span><span class="pi">:</span>
    <span class="na">database</span><span class="pi">:</span> <span class="s">cities_database</span>
    <span class="na">user</span><span class="pi">:</span> <span class="s">cities_root</span>
    <span class="na">adapter</span><span class="pi">:</span> <span class="s">mysql</span>
    <span class="na">migrations_paths</span><span class="pi">:</span> <span class="s">db/cities_migrate</span>
  <span class="na">cities_replica</span><span class="pi">:</span>
    <span class="na">database</span><span class="pi">:</span> <span class="s">my_cities_database</span>
    <span class="na">user</span><span class="pi">:</span> <span class="s">cities_readonly</span>
    <span class="na">adapter</span><span class="pi">:</span> <span class="s">mysql</span>
    <span class="na">replica</span><span class="pi">:</span> <span class="kc">true</span>
</code></pre></div></div>

<p>Bu noktada birkaç konuya değinmek ve dikkat etmek gerekiyor. Öncelikle bir veritabanı eğer replika bir veritabanı ise <code class="language-plaintext highlighter-rouge">replica: true</code> yazmak gerekiyor. Bunun yanında replika veritabanlarının adlarının aynı olması şart değil ancak aynı veri üzerinden çalışmalar olacağı için adlarının aynı olmasının faydası var.</p>

<p><code class="language-plaintext highlighter-rouge">migration_paths</code> Rails’da veritabanı <strong>migration</strong>‘larının yerini söylemek için belirtmemiz gerekiyor. <code class="language-plaintext highlighter-rouge">cities </code> veritabanı bir
<strong>migration</strong> çalıştırmak istersek <code class="language-plaintext highlighter-rouge">--database</code> opsiyonu ile hangi dosyada çalışmaların olacağını belirtebiliyoruz.</p>

<p>`
$ rails g migration CreateTowns name:string –database cities
`</p>

<p><strong>Model</strong> seviyesinde ise birkaç ayara ihtiyac duyuyoruz. Burada önemli olan hangi veritabanlarının ne görevler yapacağı.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">CitiesBase</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="nb">self</span><span class="p">.</span><span class="nf">abstract_class</span> <span class="o">=</span> <span class="kp">true</span>

  <span class="n">connects_to</span> <span class="ss">database: </span><span class="p">{</span> <span class="ss">writing: :cities</span><span class="p">,</span> <span class="ss">reading: :cities_replica</span> <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p><strong>ApplicationRecord</strong>‘u da güncellememiz gerekiyor.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ApplicationRecord</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="nb">self</span><span class="p">.</span><span class="nf">abstract_class</span> <span class="o">=</span> <span class="kp">true</span>

  <span class="n">connects_to</span> <span class="ss">database: </span><span class="p">{</span> <span class="ss">writing: :primary</span><span class="p">,</span> <span class="ss">reading: :primary_replica</span> <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">rails -T</code> komutu ile de bütün <strong>task</strong>‘ları görebilirsiniz. Hangi veritabanında çalışma yapmak istiyorsanız, adını sona ekleyerek yapabilirsiniz. <code class="language-plaintext highlighter-rouge">rails db:migrate:status:cities</code></p>

<p>Ruby on Rails ile çoklu veritabanı kullanımı henüz RC versiyonda olasa da projelerde kullanılabilir durumda. Github ekibi tarafından geliştirilen ve şu an kullanılan bu özellik Ruby on Rails’ın gücünü daha da artıracak gibi duruyor.</p>

<p>Sevgiler.</p>

<p><small><strong>Referanslar:</strong></small>
<br />
<small><em>https://edgeguides.rubyonrails.org/active_record_multiple_databases.html</em></small>
<small><em>https://www.citusdata.com/blog/2019/05/23/rails-6-multiple-databases/</em></small></p>]]></content><author><name>Ender Ahmet Yurt</name><email>enderyurt@gmail.com</email></author><category term="ruby-on-rails" /><summary type="html"><![CDATA[Merhaba. Ruby on Rails’ın son versiyonu olan 6. versiyonu ile gelen multiple database özelliği ile artık çoklu veritabanı yönetimi yapılabiliyor.]]></summary></entry><entry><title type="html">Ruby on AWS Lambda</title><link href="http://localhost:4000/2018/12/19/ruby-on-aws-lambda.html" rel="alternate" type="text/html" title="Ruby on AWS Lambda" /><published>2018-12-19T00:00:00+03:00</published><updated>2018-12-19T00:00:00+03:00</updated><id>http://localhost:4000/2018/12/19/ruby-on-aws-lambda</id><content type="html" xml:base="http://localhost:4000/2018/12/19/ruby-on-aws-lambda.html"><![CDATA[<p>Merhaba. Yakın zamanda duyurulan Aws Lambda’dan bahsetmek istiyorum.</p>

<p>Aws Ruby SDK’sı Aws üzerinde işlemler yapmamıza yarıyor. Bu SDK ile Amazon’un Amazon EC2, S3, SQS, SNS gibi servislerini kullanabiliyoruz. Yeni gelişmeler ile Amazon Lambda servisini de artık kullanabilir oluyoruz. Bu geliştirme ile artık Lambda fonksiyonları Ruby gibi kullanabilir ve AWS üzerinde çalıştırabiliriz. Bu girişten sonra küçük bir örnek yapalım.</p>

<p>Öncelikle <a href="https://console.aws.amazon.com/lambda/home">Lambda Console</a>‘u açmak gerekiyor. Bu sayfada sırasıyla yapmamız gerekenler,</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Create function</code>‘a tıklıyoruz.</li>
  <li>Küçük bir örnek yapabilmek için <code class="language-plaintext highlighter-rouge">Author from scratch</code>‘i seçiyoruz.</li>
  <li>Function’ımıza kolay bir isim verdikten sonra, Ruby versiyonunu seçiyoruz.</li>
  <li><code class="language-plaintext highlighter-rouge">Role</code> için ise <code class="language-plaintext highlighter-rouge">Create a new role from one or more templates.</code> diyip, <code class="language-plaintext highlighter-rouge">Role</code> kısmına bir rol adı yazıyoruz.</li>
  <li>Sonrasında alttaki <code class="language-plaintext highlighter-rouge">Create function</code>‘a basıp Lambda function’ımınızın oluşturulduğunu görüyoruz.</li>
</ul>

<div style="display: flex; justify-content: center;"><img src="/assets/img/aws1.png" /></div>

<p>Lambda function’ı create edildikten sonraki açılan ekrandan her türlü kod düzenlemesini yapabilir, diğer servisler ile function’ı bağlayabilir ve servis ayarlarınızı yapabilirsiniz. Diğer tab yani <code class="language-plaintext highlighter-rouge">Monitoring</code> tab’ınıdan ise function’ının kullanımı ile alakalı sayıları alabilir, log servislerini kullanabilirsiniz.</p>

<p>Alt tarafa code editor göreceksiniz. Burada lambda function’ımızı düzeltebiliriz. Gördüğümüz kod ise basit bir JSON önden lambda_handler isimli bir function. Bu kodu çalıştırmak için yapmamız gereken <code class="language-plaintext highlighter-rouge">Test</code>‘e basıp, bir test event’i set edebilmek. Şimdilik biz bu alanı <code class="language-plaintext highlighter-rouge">{}</code> şeklinde tanımlıyoruz ve bir <code class="language-plaintext highlighter-rouge">Event name</code> verip, create ediyoruz. Sonrasında tekrar <code class="language-plaintext highlighter-rouge">Test</code> dediğimizde, Ruby Lamba Function’nın çalıştığını görebiliyoruz.</p>

<div style="display: flex; justify-content: center;"><img src="/assets/img/aws2.png" /></div>

<p>Sevgiler.</p>]]></content><author><name>Ender Ahmet Yurt</name><email>enderyurt@gmail.com</email></author><category term="ruby" /><summary type="html"><![CDATA[Merhaba. Yakın zamanda duyurulan Aws Lambda’dan bahsetmek istiyorum.]]></summary></entry><entry><title type="html">Ruby State Design Pattern</title><link href="http://localhost:4000/2018/12/04/ruby-state-design-pattern.html" rel="alternate" type="text/html" title="Ruby State Design Pattern" /><published>2018-12-04T00:00:00+03:00</published><updated>2018-12-04T00:00:00+03:00</updated><id>http://localhost:4000/2018/12/04/ruby-state-design-pattern</id><content type="html" xml:base="http://localhost:4000/2018/12/04/ruby-state-design-pattern.html"><![CDATA[<p>Merhaba. Bugün <strong>State Design Pattern</strong>‘ın Ruby’deki kullanımından bahsetmek istiyorum.</p>

<p>State design pattern, behavior pattern altında tanımlanır. Bu pattern’da bir nesnenin farklı durumlarda farklı şekillerde çalışmasını düzenlenir. Yani bir nesnenin durumu değiştiğinde o nesnenin çalışma şekli değişir. Bu duruma en güzel örnek trafik ışıklarını verebiliriz. Görme engelliler için trafik ışıklarını düşünün, kırmızı, sarı ve yeşil yandığında, durun, bekleyin ve geçin diyor. Işıklar arası geçişlerde ise birkaç saniye boşluk vererek, diğer ışığa geçiyor. Bu durumda ışıkların state’leri değişiyor ve yapacakları eylemler de state’lere göre belli oluyor.</p>

<p>State design pattern’ın 3 ana component’dan oluşuyor.</p>

<ul>
  <li>Context Class: Mevcut durumu bilen class.</li>
  <li>State Class: tanımlanmış state’lerin yapacağı işleri bilen class.</li>
  <li>State class’ından türetilmiş bütün durumlar için olan class’lar.</li>
</ul>

<p>Peki bu durumun yararı nedir? Bütün state’ler kendi durumlarını yapacakları işi ve sonraki state’i biliyor. Mevcut state’in ne olduğuyla ilgilenmiyor. Aslında bu design yerine if/else de kullanıbilir ancak hem mimari olarak hem de kodu okumak anlamında if/else kullanmak daha zor olacaktır.</p>

<p>Şimdi bu tanımları Ruby’de trafik ışıkları örneği ile nasıl yazabiliriz, ona bakalım.</p>

<p>Öncelikle bir context class’ına ihtiyacımız var. TrafficLight class’ını context olarak belirliyoruz.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TrafficLight</span>
  <span class="k">def</span> <span class="nf">initialize</span>
    <span class="vi">@state</span> <span class="o">=</span> <span class="kp">nil</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">next_state</span><span class="p">(</span><span class="n">klass</span> <span class="o">=</span> <span class="no">Green</span><span class="p">)</span>
    <span class="vi">@state</span> <span class="o">=</span> <span class="n">klass</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
    <span class="vi">@state</span><span class="p">.</span><span class="nf">beep</span>
    <span class="vi">@state</span><span class="p">.</span><span class="nf">start_timer</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Sonrasında ise bir State class’ı tanımlıyoruz.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">State</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">light</span><span class="p">)</span>
    <span class="vi">@light</span> <span class="o">=</span> <span class="n">light</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">beep</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">next_state</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">start_timer</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Green state ve diğerleri için şu şekilde bir class tanımlayabiliriz.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Green</span> <span class="o">&lt;</span> <span class="no">State</span>
  <span class="k">def</span> <span class="nf">beep</span>
    <span class="nb">puts</span> <span class="s2">"Color is now green"</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">next_state</span>
    <span class="vi">@light</span><span class="p">.</span><span class="nf">next_state</span><span class="p">(</span><span class="no">Yellow</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">start_timer</span>
    <span class="nb">sleep</span> <span class="mi">5</span><span class="p">;</span> <span class="n">next_state</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Yellow</span> <span class="o">&lt;</span> <span class="no">State</span>
  <span class="k">def</span> <span class="nf">beep</span>
    <span class="nb">puts</span> <span class="s2">"Color is now yellow"</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">next_state</span>
    <span class="vi">@light</span><span class="p">.</span><span class="nf">next_state</span><span class="p">(</span><span class="no">Red</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">start_timer</span>
    <span class="nb">sleep</span> <span class="mi">5</span><span class="p">;</span> <span class="n">next_state</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Red</span> <span class="o">&lt;</span> <span class="no">State</span>
  <span class="k">def</span> <span class="nf">beep</span>
    <span class="nb">puts</span> <span class="s2">"Color is now red"</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">next_state</span>
    <span class="vi">@light</span><span class="p">.</span><span class="nf">next_state</span><span class="p">(</span><span class="n">green</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">start_timer</span>
    <span class="nb">sleep</span> <span class="mi">5</span><span class="p">;</span> <span class="n">next_state</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Artık her state ne yapacağı ve kendisinden sonra hangi state’in geleceğini biliyor.</p>

<p>Daha gerçekçi ve çalışan örnek için <a href="https://github.com/ryanb/ruby-warrior">RubyWarrior</a>‘ı inceleyebilirsiniz.</p>

<p>Eğer Ruby projelerinizde state machine kullanmak istiyorsanız <a href="https://github.com/aasm/aasm">AASM</a> deneyebilirsiniz. Bu gem ile state’lerin durumlarını takip edebilir, callback’ler ile event’leri yönetebilirsiniz.</p>

<p>Sevgiler.</p>

<p><small><strong>Referanslar:</strong></small></p>

<p><small><em>https://www.rubyguides.com/2018/12/state-machines/?tl_inbound=1&amp;tl_target_all=1&amp;tl_form_type=1&amp;tl_period_type=1</em></small></p>]]></content><author><name>Ender Ahmet Yurt</name><email>enderyurt@gmail.com</email></author><category term="ruby" /><summary type="html"><![CDATA[Merhaba. Bugün State Design Pattern‘ın Ruby’deki kullanımından bahsetmek istiyorum.]]></summary></entry></feed>