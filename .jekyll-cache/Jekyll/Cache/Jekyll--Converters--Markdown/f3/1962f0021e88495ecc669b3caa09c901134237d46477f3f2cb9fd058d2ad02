I"ï<p>Merhaba! Rubyâ€™nin en gÃ¼Ã§lÃ¼ Ã¶zelliklerinden biri bloklardÄ±r. DiÄŸer dillerin aksine Rubyâ€™de bloklarÄ± anlamak ve kullanmak kolay ve basittir.</p>

<p>Rubyâ€™de bloklarÄ±nÄ± kullanmak iÃ§in iki yÃ¶ntemimiz var,</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">do</code> ve <code class="language-plaintext highlighter-rouge">end</code> arasÄ±na kodlarÄ±mÄ±zÄ± yazmak.</li>
  <li><code class="language-plaintext highlighter-rouge">{}</code> bu iki parantez arasÄ±na kodlarÄ±mÄ±zÄ± yazmak.</li>
</ul>

<p>Ã–rnek vericek olursak,</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> my_array <span class="o">=</span> <span class="o">[</span>2,4,6]

<span class="o">&gt;</span> my_array.map! <span class="k">do</span> |m|
<span class="o">&gt;</span>  m <span class="k">**</span> 3
<span class="o">&gt;</span> end
<span class="o">=&gt;</span> <span class="o">[</span>8, 64, 216]
</code></pre></div></div>

<p>Bu iÅŸlemi tek satÄ±rda parantezler iÃ§inde de yapmak mÃ¼mkÃ¼ndÃ¼r.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> my_array <span class="o">=</span> <span class="o">[</span>2,4,6]
<span class="o">&gt;</span> my_array.map! <span class="o">{</span> |m| m <span class="k">**</span> 3 <span class="o">}</span>
<span class="o">=&gt;</span> <span class="o">[</span>8, 64, 216]
</code></pre></div></div>

<p>Rubyâ€™de hazÄ±r blockâ€™larÄ±n dÄ±ÅŸÄ±nda kendi blocklarÄ±mÄ±zÄ± da yazabiliriz.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">change</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
 <span class="nb">self</span><span class="p">.</span><span class="nf">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">e</span><span class="p">,</span> <span class="n">i</span><span class="o">|</span>
   <span class="nb">self</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">block</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
 <span class="k">end</span>
<span class="k">end</span>

<span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">].</span><span class="nf">change</span> <span class="k">do</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span>
  <span class="n">e</span> <span class="o">**</span> <span class="mi">2</span>
<span class="k">end</span>

<span class="o">=&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">16</span><span class="p">]</span>
</code></pre></div></div>
<p><em>Ã–rnek, SÄ±ktÄ± BaÄŸdatâ€™Ä±n Ruby kitabÄ±ndan alÄ±nmÄ±ÅŸtÄ±r.</em></p>

<p>YukarÄ±daki Ã¶rnekte <code class="language-plaintext highlighter-rouge">change</code> metotuna blockâ€™u parametre olarak gÃ¶nderiyoruz. Rubyâ€™de bir metota blockâ€™un parametre olarak geÃ§tiÄŸini belirtmek iÃ§in <code class="language-plaintext highlighter-rouge">&amp;</code> kullanÄ±yoruz. Metot iÃ§inde ise gÃ¶nderilen blockâ€™u kullanmak iÃ§in <code class="language-plaintext highlighter-rouge">call</code> metotunu Ã§aÄŸÄ±rÄ±yoruz.</p>

<p><code class="language-plaintext highlighter-rouge">yield</code> Rubyâ€™de bir anahtar kelimedir ve kullanÄ±mÄ± <code class="language-plaintext highlighter-rouge">block</code> gibidir. Ancak aralarÄ±nda ufak farklÄ±lÄ±klar vardÄ±r. Bunlardan biri yieldâ€™i Ã§aÄŸÄ±rÄ±rken call metotunu Ã§aÄŸÄ±rmaya ihtiyacÄ±mÄ±z yoktur. AyrÄ±ca yield, blockâ€™a gÃ¶re performans olarak daha iyidir.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">name</span>
  <span class="k">yield</span>
<span class="k">end</span>

<span class="nb">puts</span> <span class="nb">name</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">"ender"</span> <span class="p">}</span>

<span class="o">=&gt;</span> <span class="n">ender</span>
</code></pre></div></div>

<p>Parametre geÃ§irmek yield iÃ§in de geÃ§erlidir. AynÄ± blockâ€™da olduÄŸu gibi yield da parametre alabilir.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">sum</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
  <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="n">n</span><span class="p">.</span><span class="nf">times</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">sum</span> <span class="o">+=</span> <span class="k">yield</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)}</span>
  <span class="n">sum</span>
<span class="k">end</span>

<span class="nb">puts</span> <span class="n">sum</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="p">}</span>

<span class="o">=&gt;</span> <span class="mi">55</span>
</code></pre></div></div>
<p><em>Ã–rnek, SÄ±ktÄ± BaÄŸdatâ€™Ä±n Ruby kitabÄ±ndan alÄ±nmÄ±ÅŸtÄ±r.</em></p>

<p>Rubyâ€™de blockâ€™larÄ± birer nesne gibi kullanmak iÃ§in <code class="language-plaintext highlighter-rouge">Proc</code> nesnesinden yararlanÄ±yoruz. <code class="language-plaintext highlighter-rouge">proc = Proc.new {}</code> ÅŸeklinde Ã§aÄŸÄ±rarak iÅŸlemlerimize baÅŸlÄ±yoruz.</p>

<p>Proc nesnesini Ã§aÄŸÄ±rmak iÃ§in blockâ€™larda olduÄŸu gibi call metotununu kullanabiliriz.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> proc <span class="o">=</span> Proc.new <span class="o">{</span> puts <span class="s2">"Hello from Proc."</span> <span class="o">}</span>
<span class="o">&gt;</span> proc.call
<span class="o">=&gt;</span> Hello from Proc.
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Lambda</code> Proc sÄ±nÄ±fÄ±ndan tÃ¼reyen bir nesnedir. Lambdaâ€™yÄ± oluÅŸturmak iÃ§in Rubyâ€™de genellikle <code class="language-plaintext highlighter-rouge">my_lambda = -&gt; {}</code> kullanÄ±lÄ±r. Bu kullanÄ±m Lambda nesnesi oluÅŸturmamÄ±za yarar.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> mult  <span class="o">=</span> lambda <span class="o">{</span>|x,y| x <span class="k">*</span> y <span class="o">}</span>
<span class="o">&gt;</span> mult.call<span class="o">(</span>2,3<span class="o">)</span>
<span class="o">=&gt;</span> 6
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> wtp <span class="o">=</span> -&gt; <span class="o">{</span> puts <span class="s2">"What's up?"</span> <span class="o">}</span>
<span class="o">&gt;</span> wtp.call
<span class="o">=&gt;</span> What<span class="s1">'s up?
</span></code></pre></div></div>

<p>Rubyâ€™de Block, Yield, Proc ve Lambda kullanÄ±mlarÄ± oldukÃ§a yaygÄ±n olduÄŸunu unutmayalÄ±m. Ã–zellikle kodlarÄ± daha okunur ve kendini tekrar etmeyecek ÅŸekilde yazmak istediÄŸimizde bu Ã¶zellikleri kullanabiliriz.</p>

<p>Sevgiler.</p>
:ET