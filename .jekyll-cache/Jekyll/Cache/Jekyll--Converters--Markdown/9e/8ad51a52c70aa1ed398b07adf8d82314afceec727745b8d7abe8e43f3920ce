I"^<p>Merhaba! Bugün Ruby’de hemen hemen her gün kullandığımız <code class="language-plaintext highlighter-rouge">Enumerable</code> metotlarından bahsetmek istiyorum.</p>

<p>Bu yazıda kullanılan örnekleri daha iyi anlayabilmek için öncelikle Ruby’de Array ve Hash kavramlarını biraz olsun bilmeniz gerekiyor.</p>

<p>Ruby’de <code class="language-plaintext highlighter-rouge">Enumerable</code> modülüne ihtiyaç duymamızın nedeni colletion’lar üzerinde daha hızlı ve kolay çalışmalar yapabilmektir. Örneğin, bir collection içindeki bütün tek sayıları getirmek için döngüler ve if bloklarını kullanabiliriz. Ancak bunun yerine <code class="language-plaintext highlighter-rouge">Enumerable</code> modülünde tanımlı metotlardan yardım alabiliyoruz.</p>

<p><code class="language-plaintext highlighter-rouge">Enumerable</code> ın metotlarını aşağıdaki gibi sıralayabiliriz.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> Enumerable.instance_metots.sort
<span class="o">=&gt;</span> <span class="o">[</span>:all?, :any?, :chunk, :collect, :collect_concat, :count, :cycle, :detect, :drop, :drop_while, :each_cons, :each_entry, :each_slice, :each_with_index, :each_with_object, :entries, :find, :find_all, :find_index, :first, :flat_map, :grep, :group_by, :include?, :inject, :lazy, :map, :max, :max_by, :member?, :min, :min_by, :minmax, :minmax_by, :none?, :one?, :partition, :reduce, :reject, :reverse_each, :select, :slice_before, :sort, :sort_by, :take, :take_while, :to_a, :to_h, :zip]
</code></pre></div></div>

<p>Bunların bazılarından bahsetmek gerekirse.</p>

<h2 id="each_with_index">#each_with_index</h2>
<p><code class="language-plaintext highlighter-rouge">each</code> ile bir collection içindeki elemanları tek tek gezebiliriz.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="o">[</span>1,2,3].each <span class="o">{</span> |num| print <span class="s2">"Number: #{num} "</span> <span class="o">}</span>
<span class="o">=&gt;</span> Number: 1 Number: 2 Number: 3
</code></pre></div></div>
<p>Bu elemanların tek tek index’lerine ulaşmak için ise <code class="language-plaintext highlighter-rouge">each_with_index</code>i kullanabiliriz.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="o">[</span>9,8,7].each_with_index <span class="k">do</span> |e,i|
<span class="o">&gt;</span>   puts <span class="s2">"Index: #{i} Number: #{e}"</span>
<span class="o">&gt;</span> end
<span class="o">=&gt;</span> Index: 0 Number: 9
<span class="o">=&gt;</span> Index: 1 Number: 8
<span class="o">=&gt;</span> Index: 2 Number: 7
</code></pre></div></div>

<h2 id="map">#map</h2>
<p>Bir collection içindeki elemanlar üzerinde çalışmaklar yapmak istiyorsak <code class="language-plaintext highlighter-rouge">map</code> kullanmak en iyisi olacaktır.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="o">[</span>5,10,20].map<span class="o">{</span>|e| puts e<span class="k">**</span>2<span class="o">}</span>
<span class="o">=&gt;</span> 25
<span class="o">=&gt;</span> 100
<span class="o">=&gt;</span> 400
</code></pre></div></div>

<h2 id="select">#select</h2>
<p>Bazı durumlarda bir collection içinden belli bir duruma bağlı olarak değeri ya da değerleri almak isteyebiliriz. Bu durumda <code class="language-plaintext highlighter-rouge">select</code> kullanırsak kodumuzu daha anlaşılır yazmış oluruz.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="o">(</span>1..20<span class="o">)</span>.to_a.select<span class="o">{</span>|n| n.odd?<span class="o">}</span>
<span class="o">=&gt;</span> <span class="o">[</span>1, 3, 5, 7, 9, 11, 13, 15, 17, 19]
</code></pre></div></div>

<p>1 ile 20 arasındaki tüm tek sayıları ekrana bastık.</p>

<h2 id="reject">#reject</h2>
<p>Seçmenin dışında bir collection’dan çıkarmak istediğimiz elemanlarımız da olabilir. Bu gibi durumlarda ise <code class="language-plaintext highlighter-rouge">reject</code> kullanabiliriz.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="o">(</span>1..20<span class="o">)</span>.to_a.reject<span class="o">{</span>|n| n.odd?<span class="o">}</span>
<span class="o">=&gt;</span> <span class="o">[</span>2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
</code></pre></div></div>

<p>Yukarıda gördüğünüz gibi 1 ile 20 arasındaki tek sayıları çıkardım ve yeni array’im artık 1 ile 20 arasındaki çift sayılar oldu.</p>

<h2 id="any">#any?</h2>
<p>Bu metot bize duruma göre true ya da false bir boolean değer dönecektir. Eğer bir collection içinde bir duruma göre bir elemanın bulunup, bulumadığını kontrol etmek istiyorsak <code class="language-plaintext highlighter-rouge">any?</code> kullanabiliriz.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="o">(</span>1..20<span class="o">)</span>.to_a.any?<span class="o">{</span>|n| n&gt;20<span class="o">}</span>
<span class="o">=&gt;</span> <span class="nb">false</span>
</code></pre></div></div>

<h2 id="group_by">#group_by?</h2>
<p>Sanırım kullanımı en karizmatik metot bu olabilir. Elimizdeki bir collection’ı istediğimiz bir duruma göre gruplamamıza yarıyor ve bize bir Hash dönüyor.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="o">[</span><span class="s2">"ali"</span>, <span class="s2">"mehmet"</span>, <span class="s2">"osman"</span>, <span class="s2">"ayşe"</span>, <span class="s2">"emine"</span><span class="o">]</span>.group_by<span class="o">(</span>&amp;:length<span class="o">)</span>
<span class="o">=&gt;</span> <span class="o">{</span><span class="nv">3</span><span class="o">=&gt;[</span><span class="s2">"ali"</span><span class="o">]</span>, <span class="nv">6</span><span class="o">=&gt;[</span><span class="s2">"mehmet"</span><span class="o">]</span>, <span class="nv">5</span><span class="o">=&gt;[</span><span class="s2">"osman"</span>, <span class="s2">"emine"</span><span class="o">]</span>, <span class="nv">4</span><span class="o">=&gt;[</span><span class="s2">"ayşe"</span><span class="o">]}</span>
</code></pre></div></div>

<p>Yukarıda da görüldüğü gibi içinde String’ler olan Array’imizi String’lerin uzunluklarına göre grupladık.</p>

<h2 id="sort">#sort</h2>
<p>Adı üstünde :)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="o">[</span><span class="s2">"ali"</span>, <span class="s2">"mehmet"</span>, <span class="s2">"osman"</span>, <span class="s2">"ayşe"</span>, <span class="s2">"emine"</span><span class="o">]</span>.group_by<span class="o">(</span>&amp;:length<span class="o">)</span>.sort
<span class="o">=&gt;</span> <span class="o">[[</span>3, <span class="o">[</span><span class="s2">"ali"</span><span class="o">]]</span>, <span class="o">[</span>4, <span class="o">[</span><span class="s2">"ayşe"</span><span class="o">]]</span>, <span class="o">[</span>5, <span class="o">[</span><span class="s2">"osman"</span>, <span class="s2">"emine"</span><span class="o">]]</span>, <span class="o">[</span>6, <span class="o">[</span><span class="s2">"mehmet"</span><span class="o">]]]</span>
</code></pre></div></div>

<p>Tabiki bütün kullanımlar bu kadar değil. Daha fazlası da var. Belki başka bir yazıda daha detaylı olarak diğer kullanımlardan örnekler verebilirim.</p>

<p>Sevgiler.</p>
:ET